type User {
  id: ID! @id
  email: String! @unique
  firstName: String!
  lastName: String!
  password: String!
  parties: [Party!] @relation(name: "UserParties")
  friends: [User!] @relation(name: "UserFriends")
  pendingFriendInvitations: [FriendInvitation!]!
    @relation(name: "PendingFriendInvitations")
  pendingPartyInvitations: [PartyInvitation!]!
    @relation(name: "PendingPartyInvitations")
  chats: [Chat!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  lastOnline: DateTime @default(value: "1970-01-01T00:00:01")
  deleted: Boolean! @default(value: false)
  provider: SocialMediaType
  avatar: String
  thirdPartyId: String
  resetToken: String
  resetTokenExpiry: DateTime
  cartItems: [PartyCartItem!]!
}

type Message {
  id: ID! @id
  author: User! @relation(name: "MessageAuthor")
  chat: Chat! @relation(name: "MessagesInChat")
  content: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type PartyInvitation {
  id: ID! @id
  invitedBy: User! @relation(name: "PartyInvitationInvitedBy")
  user: User! @relation(name: "PendingPartyInvitations")
  party: Party! @relation(name: "PartyInvitationParty")
  invitedUserId: String!
  partyId: String!
  createdAt: DateTime! @createdAt
}

type FriendInvitation {
  id: ID! @id
  invitedBy: User! @relation(name: "FriendInvitationInvitedBy")
  user: User! @relation(name: "PendingFriendInvitations")
  createdAt: DateTime! @createdAt
  invitedUserId: String!
}

type Party {
  id: ID! @id
  title: String!
  normalizedTitle: String!
  description: String!
  author: User! @relation(name: "PartiesByUser")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  location: Location!
  games: [Game!]
  colorTint: String!
  isPublic: Boolean @default(value: false)
  members: [User!]! @relation(name: "UserParties")
  start: DateTime! @default(value: "1970-01-01T00:00:01")
  end: DateTime! @default(value: "1970-01-01T00:00:01")
  inviteSecret: String! @unique
  playlist: [Playlist!]
  savedTracks: [PartySavedTrack!]
  cart: PartyCart! @relation(link: INLINE)
}

type Chat {
  id: ID! @id
  party: Party!
  members: [User!]!
  messages: [Message!] @relation(name: "MessagesInChat")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Game {
  id: ID! @id
  title: String! @unique
  cover: String
  type: GameType!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Location {
  id: ID! @id
  placeName: String!
  latitude: Float!
  longitude: Float!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Playlist {
  id: ID! @id
  spotifyId: ID! @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  uri: String!
  spotifyExternalUrl: String!
  user: User!
  parties: [Party!]!
  name: String!
  imageUrl: String!
  tracks: [PartySavedTrack!]!
  isTemporary: Boolean @default(value: false)
}

type PartyCart {
  id: ID! @id
  party: Party!
  items: [PartyCartItem!]!
}

type PartyCartItem {
  id: ID! @id
  cart: PartyCart!
  user: User!
  name: String!
  description: String!
  price: Float!
  status: PartyCartItemStatus!
  quantity: Int! @default(value: 0)
}

type Track {
  id: ID! @id
  name: String!
  album: Album!
  artists: [Artist!]!
  duration: Int!
  preview_url: String
}

type PartySavedTrack {
  id: ID! @id
  spotifyId: String!
  durationMs: Int!
  explicit: Boolean!
  name: String!
  previewUrl: String
  uri: String!
  party: Party!
  stringArtists: String!
  length: String!
  popularity: Int!
  album: Album! @relation(link: INLINE)
}

type Album {
  id: ID! @id
  spotifyId: ID!
  uri: String!
  name: String!
  releaseDate: String!
  imageUrl: String!
}

type Artist {
  id: ID! @id
  spotifyId: ID!
  uri: String!
  name: String!
}

type Image {
  id: ID! @id
  height: Int!
  width: Int!
  url: String!
}
enum GameType {
  BOARD
  PC
  CONSOLE
}
enum SocialMediaType {
  FACEBOOK
  SPOTIFY
  TWITTER
}

enum PartyCartItemStatus {
  PENDING
  ACCEPTED
  REJECTED
}
