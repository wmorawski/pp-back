// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  album: (where?: AlbumWhereInput) => Promise<boolean>;
  artist: (where?: ArtistWhereInput) => Promise<boolean>;
  chat: (where?: ChatWhereInput) => Promise<boolean>;
  friendInvitation: (where?: FriendInvitationWhereInput) => Promise<boolean>;
  game: (where?: GameWhereInput) => Promise<boolean>;
  image: (where?: ImageWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  party: (where?: PartyWhereInput) => Promise<boolean>;
  partyCart: (where?: PartyCartWhereInput) => Promise<boolean>;
  partyCartItem: (where?: PartyCartItemWhereInput) => Promise<boolean>;
  partyInvitation: (where?: PartyInvitationWhereInput) => Promise<boolean>;
  partySavedTrack: (where?: PartySavedTrackWhereInput) => Promise<boolean>;
  playlist: (where?: PlaylistWhereInput) => Promise<boolean>;
  track: (where?: TrackWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  album: (where: AlbumWhereUniqueInput) => AlbumNullablePromise;
  albums: (args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Album>;
  albumsConnection: (args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AlbumConnectionPromise;
  artist: (where: ArtistWhereUniqueInput) => ArtistNullablePromise;
  artists: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Artist>;
  artistsConnection: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArtistConnectionPromise;
  chat: (where: ChatWhereUniqueInput) => ChatNullablePromise;
  chats: (args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Chat>;
  chatsConnection: (args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChatConnectionPromise;
  friendInvitation: (
    where: FriendInvitationWhereUniqueInput
  ) => FriendInvitationNullablePromise;
  friendInvitations: (args?: {
    where?: FriendInvitationWhereInput;
    orderBy?: FriendInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FriendInvitation>;
  friendInvitationsConnection: (args?: {
    where?: FriendInvitationWhereInput;
    orderBy?: FriendInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FriendInvitationConnectionPromise;
  game: (where: GameWhereUniqueInput) => GameNullablePromise;
  games: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Game>;
  gamesConnection: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GameConnectionPromise;
  image: (where: ImageWhereUniqueInput) => ImageNullablePromise;
  images: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Image>;
  imagesConnection: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ImageConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  party: (where: PartyWhereUniqueInput) => PartyNullablePromise;
  parties: (args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Party>;
  partiesConnection: (args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PartyConnectionPromise;
  partyCart: (where: PartyCartWhereUniqueInput) => PartyCartNullablePromise;
  partyCarts: (args?: {
    where?: PartyCartWhereInput;
    orderBy?: PartyCartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PartyCart>;
  partyCartsConnection: (args?: {
    where?: PartyCartWhereInput;
    orderBy?: PartyCartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PartyCartConnectionPromise;
  partyCartItem: (
    where: PartyCartItemWhereUniqueInput
  ) => PartyCartItemNullablePromise;
  partyCartItems: (args?: {
    where?: PartyCartItemWhereInput;
    orderBy?: PartyCartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PartyCartItem>;
  partyCartItemsConnection: (args?: {
    where?: PartyCartItemWhereInput;
    orderBy?: PartyCartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PartyCartItemConnectionPromise;
  partyInvitation: (
    where: PartyInvitationWhereUniqueInput
  ) => PartyInvitationNullablePromise;
  partyInvitations: (args?: {
    where?: PartyInvitationWhereInput;
    orderBy?: PartyInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PartyInvitation>;
  partyInvitationsConnection: (args?: {
    where?: PartyInvitationWhereInput;
    orderBy?: PartyInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PartyInvitationConnectionPromise;
  partySavedTrack: (
    where: PartySavedTrackWhereUniqueInput
  ) => PartySavedTrackNullablePromise;
  partySavedTracks: (args?: {
    where?: PartySavedTrackWhereInput;
    orderBy?: PartySavedTrackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PartySavedTrack>;
  partySavedTracksConnection: (args?: {
    where?: PartySavedTrackWhereInput;
    orderBy?: PartySavedTrackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PartySavedTrackConnectionPromise;
  playlist: (where: PlaylistWhereUniqueInput) => PlaylistNullablePromise;
  playlists: (args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Playlist>;
  playlistsConnection: (args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlaylistConnectionPromise;
  track: (where: TrackWhereUniqueInput) => TrackNullablePromise;
  tracks: (args?: {
    where?: TrackWhereInput;
    orderBy?: TrackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Track>;
  tracksConnection: (args?: {
    where?: TrackWhereInput;
    orderBy?: TrackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TrackConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAlbum: (data: AlbumCreateInput) => AlbumPromise;
  updateAlbum: (args: {
    data: AlbumUpdateInput;
    where: AlbumWhereUniqueInput;
  }) => AlbumPromise;
  updateManyAlbums: (args: {
    data: AlbumUpdateManyMutationInput;
    where?: AlbumWhereInput;
  }) => BatchPayloadPromise;
  upsertAlbum: (args: {
    where: AlbumWhereUniqueInput;
    create: AlbumCreateInput;
    update: AlbumUpdateInput;
  }) => AlbumPromise;
  deleteAlbum: (where: AlbumWhereUniqueInput) => AlbumPromise;
  deleteManyAlbums: (where?: AlbumWhereInput) => BatchPayloadPromise;
  createArtist: (data: ArtistCreateInput) => ArtistPromise;
  updateArtist: (args: {
    data: ArtistUpdateInput;
    where: ArtistWhereUniqueInput;
  }) => ArtistPromise;
  updateManyArtists: (args: {
    data: ArtistUpdateManyMutationInput;
    where?: ArtistWhereInput;
  }) => BatchPayloadPromise;
  upsertArtist: (args: {
    where: ArtistWhereUniqueInput;
    create: ArtistCreateInput;
    update: ArtistUpdateInput;
  }) => ArtistPromise;
  deleteArtist: (where: ArtistWhereUniqueInput) => ArtistPromise;
  deleteManyArtists: (where?: ArtistWhereInput) => BatchPayloadPromise;
  createChat: (data: ChatCreateInput) => ChatPromise;
  updateChat: (args: {
    data: ChatUpdateInput;
    where: ChatWhereUniqueInput;
  }) => ChatPromise;
  upsertChat: (args: {
    where: ChatWhereUniqueInput;
    create: ChatCreateInput;
    update: ChatUpdateInput;
  }) => ChatPromise;
  deleteChat: (where: ChatWhereUniqueInput) => ChatPromise;
  deleteManyChats: (where?: ChatWhereInput) => BatchPayloadPromise;
  createFriendInvitation: (
    data: FriendInvitationCreateInput
  ) => FriendInvitationPromise;
  updateFriendInvitation: (args: {
    data: FriendInvitationUpdateInput;
    where: FriendInvitationWhereUniqueInput;
  }) => FriendInvitationPromise;
  updateManyFriendInvitations: (args: {
    data: FriendInvitationUpdateManyMutationInput;
    where?: FriendInvitationWhereInput;
  }) => BatchPayloadPromise;
  upsertFriendInvitation: (args: {
    where: FriendInvitationWhereUniqueInput;
    create: FriendInvitationCreateInput;
    update: FriendInvitationUpdateInput;
  }) => FriendInvitationPromise;
  deleteFriendInvitation: (
    where: FriendInvitationWhereUniqueInput
  ) => FriendInvitationPromise;
  deleteManyFriendInvitations: (
    where?: FriendInvitationWhereInput
  ) => BatchPayloadPromise;
  createGame: (data: GameCreateInput) => GamePromise;
  updateGame: (args: {
    data: GameUpdateInput;
    where: GameWhereUniqueInput;
  }) => GamePromise;
  updateManyGames: (args: {
    data: GameUpdateManyMutationInput;
    where?: GameWhereInput;
  }) => BatchPayloadPromise;
  upsertGame: (args: {
    where: GameWhereUniqueInput;
    create: GameCreateInput;
    update: GameUpdateInput;
  }) => GamePromise;
  deleteGame: (where: GameWhereUniqueInput) => GamePromise;
  deleteManyGames: (where?: GameWhereInput) => BatchPayloadPromise;
  createImage: (data: ImageCreateInput) => ImagePromise;
  updateImage: (args: {
    data: ImageUpdateInput;
    where: ImageWhereUniqueInput;
  }) => ImagePromise;
  updateManyImages: (args: {
    data: ImageUpdateManyMutationInput;
    where?: ImageWhereInput;
  }) => BatchPayloadPromise;
  upsertImage: (args: {
    where: ImageWhereUniqueInput;
    create: ImageCreateInput;
    update: ImageUpdateInput;
  }) => ImagePromise;
  deleteImage: (where: ImageWhereUniqueInput) => ImagePromise;
  deleteManyImages: (where?: ImageWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createParty: (data: PartyCreateInput) => PartyPromise;
  updateParty: (args: {
    data: PartyUpdateInput;
    where: PartyWhereUniqueInput;
  }) => PartyPromise;
  updateManyParties: (args: {
    data: PartyUpdateManyMutationInput;
    where?: PartyWhereInput;
  }) => BatchPayloadPromise;
  upsertParty: (args: {
    where: PartyWhereUniqueInput;
    create: PartyCreateInput;
    update: PartyUpdateInput;
  }) => PartyPromise;
  deleteParty: (where: PartyWhereUniqueInput) => PartyPromise;
  deleteManyParties: (where?: PartyWhereInput) => BatchPayloadPromise;
  createPartyCart: (data: PartyCartCreateInput) => PartyCartPromise;
  updatePartyCart: (args: {
    data: PartyCartUpdateInput;
    where: PartyCartWhereUniqueInput;
  }) => PartyCartPromise;
  upsertPartyCart: (args: {
    where: PartyCartWhereUniqueInput;
    create: PartyCartCreateInput;
    update: PartyCartUpdateInput;
  }) => PartyCartPromise;
  deletePartyCart: (where: PartyCartWhereUniqueInput) => PartyCartPromise;
  deleteManyPartyCarts: (where?: PartyCartWhereInput) => BatchPayloadPromise;
  createPartyCartItem: (data: PartyCartItemCreateInput) => PartyCartItemPromise;
  updatePartyCartItem: (args: {
    data: PartyCartItemUpdateInput;
    where: PartyCartItemWhereUniqueInput;
  }) => PartyCartItemPromise;
  updateManyPartyCartItems: (args: {
    data: PartyCartItemUpdateManyMutationInput;
    where?: PartyCartItemWhereInput;
  }) => BatchPayloadPromise;
  upsertPartyCartItem: (args: {
    where: PartyCartItemWhereUniqueInput;
    create: PartyCartItemCreateInput;
    update: PartyCartItemUpdateInput;
  }) => PartyCartItemPromise;
  deletePartyCartItem: (
    where: PartyCartItemWhereUniqueInput
  ) => PartyCartItemPromise;
  deleteManyPartyCartItems: (
    where?: PartyCartItemWhereInput
  ) => BatchPayloadPromise;
  createPartyInvitation: (
    data: PartyInvitationCreateInput
  ) => PartyInvitationPromise;
  updatePartyInvitation: (args: {
    data: PartyInvitationUpdateInput;
    where: PartyInvitationWhereUniqueInput;
  }) => PartyInvitationPromise;
  updateManyPartyInvitations: (args: {
    data: PartyInvitationUpdateManyMutationInput;
    where?: PartyInvitationWhereInput;
  }) => BatchPayloadPromise;
  upsertPartyInvitation: (args: {
    where: PartyInvitationWhereUniqueInput;
    create: PartyInvitationCreateInput;
    update: PartyInvitationUpdateInput;
  }) => PartyInvitationPromise;
  deletePartyInvitation: (
    where: PartyInvitationWhereUniqueInput
  ) => PartyInvitationPromise;
  deleteManyPartyInvitations: (
    where?: PartyInvitationWhereInput
  ) => BatchPayloadPromise;
  createPartySavedTrack: (
    data: PartySavedTrackCreateInput
  ) => PartySavedTrackPromise;
  updatePartySavedTrack: (args: {
    data: PartySavedTrackUpdateInput;
    where: PartySavedTrackWhereUniqueInput;
  }) => PartySavedTrackPromise;
  updateManyPartySavedTracks: (args: {
    data: PartySavedTrackUpdateManyMutationInput;
    where?: PartySavedTrackWhereInput;
  }) => BatchPayloadPromise;
  upsertPartySavedTrack: (args: {
    where: PartySavedTrackWhereUniqueInput;
    create: PartySavedTrackCreateInput;
    update: PartySavedTrackUpdateInput;
  }) => PartySavedTrackPromise;
  deletePartySavedTrack: (
    where: PartySavedTrackWhereUniqueInput
  ) => PartySavedTrackPromise;
  deleteManyPartySavedTracks: (
    where?: PartySavedTrackWhereInput
  ) => BatchPayloadPromise;
  createPlaylist: (data: PlaylistCreateInput) => PlaylistPromise;
  updatePlaylist: (args: {
    data: PlaylistUpdateInput;
    where: PlaylistWhereUniqueInput;
  }) => PlaylistPromise;
  updateManyPlaylists: (args: {
    data: PlaylistUpdateManyMutationInput;
    where?: PlaylistWhereInput;
  }) => BatchPayloadPromise;
  upsertPlaylist: (args: {
    where: PlaylistWhereUniqueInput;
    create: PlaylistCreateInput;
    update: PlaylistUpdateInput;
  }) => PlaylistPromise;
  deletePlaylist: (where: PlaylistWhereUniqueInput) => PlaylistPromise;
  deleteManyPlaylists: (where?: PlaylistWhereInput) => BatchPayloadPromise;
  createTrack: (data: TrackCreateInput) => TrackPromise;
  updateTrack: (args: {
    data: TrackUpdateInput;
    where: TrackWhereUniqueInput;
  }) => TrackPromise;
  updateManyTracks: (args: {
    data: TrackUpdateManyMutationInput;
    where?: TrackWhereInput;
  }) => BatchPayloadPromise;
  upsertTrack: (args: {
    where: TrackWhereUniqueInput;
    create: TrackCreateInput;
    update: TrackUpdateInput;
  }) => TrackPromise;
  deleteTrack: (where: TrackWhereUniqueInput) => TrackPromise;
  deleteManyTracks: (where?: TrackWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  album: (
    where?: AlbumSubscriptionWhereInput
  ) => AlbumSubscriptionPayloadSubscription;
  artist: (
    where?: ArtistSubscriptionWhereInput
  ) => ArtistSubscriptionPayloadSubscription;
  chat: (
    where?: ChatSubscriptionWhereInput
  ) => ChatSubscriptionPayloadSubscription;
  friendInvitation: (
    where?: FriendInvitationSubscriptionWhereInput
  ) => FriendInvitationSubscriptionPayloadSubscription;
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
  image: (
    where?: ImageSubscriptionWhereInput
  ) => ImageSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  party: (
    where?: PartySubscriptionWhereInput
  ) => PartySubscriptionPayloadSubscription;
  partyCart: (
    where?: PartyCartSubscriptionWhereInput
  ) => PartyCartSubscriptionPayloadSubscription;
  partyCartItem: (
    where?: PartyCartItemSubscriptionWhereInput
  ) => PartyCartItemSubscriptionPayloadSubscription;
  partyInvitation: (
    where?: PartyInvitationSubscriptionWhereInput
  ) => PartyInvitationSubscriptionPayloadSubscription;
  partySavedTrack: (
    where?: PartySavedTrackSubscriptionWhereInput
  ) => PartySavedTrackSubscriptionPayloadSubscription;
  playlist: (
    where?: PlaylistSubscriptionWhereInput
  ) => PlaylistSubscriptionPayloadSubscription;
  track: (
    where?: TrackSubscriptionWhereInput
  ) => TrackSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "cover_ASC"
  | "cover_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SocialMediaType = "FACEBOOK" | "SPOTIFY" | "TWITTER";

export type PartyCartItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "price_ASC"
  | "price_DESC"
  | "status_ASC"
  | "status_DESC"
  | "quantity_ASC"
  | "quantity_DESC";

export type TrackOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "preview_url_ASC"
  | "preview_url_DESC";

export type ChatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AlbumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "spotifyId_ASC"
  | "spotifyId_DESC"
  | "uri_ASC"
  | "uri_DESC"
  | "name_ASC"
  | "name_DESC"
  | "releaseDate_ASC"
  | "releaseDate_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC";

export type PartyInvitationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "invitedUserId_ASC"
  | "invitedUserId_DESC"
  | "partyId_ASC"
  | "partyId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "height_ASC"
  | "height_DESC"
  | "width_ASC"
  | "width_DESC"
  | "url_ASC"
  | "url_DESC";

export type ArtistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "spotifyId_ASC"
  | "spotifyId_DESC"
  | "uri_ASC"
  | "uri_DESC"
  | "name_ASC"
  | "name_DESC";

export type PartySavedTrackOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "spotifyId_ASC"
  | "spotifyId_DESC"
  | "durationMs_ASC"
  | "durationMs_DESC"
  | "explicit_ASC"
  | "explicit_DESC"
  | "name_ASC"
  | "name_DESC"
  | "previewUrl_ASC"
  | "previewUrl_DESC"
  | "uri_ASC"
  | "uri_DESC"
  | "stringArtists_ASC"
  | "stringArtists_DESC"
  | "length_ASC"
  | "length_DESC"
  | "popularity_ASC"
  | "popularity_DESC";

export type FriendInvitationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "invitedUserId_ASC"
  | "invitedUserId_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PartyCartItemStatus = "PENDING" | "ACCEPTED" | "REJECTED";

export type GameType = "BOARD" | "PC" | "CONSOLE";

export type PartyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "normalizedTitle_ASC"
  | "normalizedTitle_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "colorTint_ASC"
  | "colorTint_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "inviteSecret_ASC"
  | "inviteSecret_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "lastOnline_ASC"
  | "lastOnline_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "provider_ASC"
  | "provider_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "thirdPartyId_ASC"
  | "thirdPartyId_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "isPrivate_ASC"
  | "isPrivate_DESC";

export type PartyCartOrderByInput = "id_ASC" | "id_DESC";

export type PlaylistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "spotifyId_ASC"
  | "spotifyId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "uri_ASC"
  | "uri_DESC"
  | "spotifyExternalUrl_ASC"
  | "spotifyExternalUrl_DESC"
  | "name_ASC"
  | "name_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "importable_ASC"
  | "importable_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "placeName_ASC"
  | "placeName_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface PartySavedTrackUpdateDataInput {
  spotifyId?: Maybe<String>;
  durationMs?: Maybe<Int>;
  explicit?: Maybe<Boolean>;
  name?: Maybe<String>;
  previewUrl?: Maybe<String>;
  uri?: Maybe<String>;
  party?: Maybe<PartyUpdateOneRequiredWithoutSavedTracksInput>;
  stringArtists?: Maybe<String>;
  length?: Maybe<String>;
  popularity?: Maybe<Int>;
  album?: Maybe<AlbumUpdateOneRequiredInput>;
}

export type AlbumWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MessageCreateWithoutChatInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneInput;
  content: String;
}

export interface UserUpsertWithoutPendingFriendInvitationsInput {
  update: UserUpdateWithoutPendingFriendInvitationsDataInput;
  create: UserCreateWithoutPendingFriendInvitationsInput;
}

export interface PartyCartItemCreateManyWithoutUserInput {
  create?: Maybe<
    PartyCartItemCreateWithoutUserInput[] | PartyCartItemCreateWithoutUserInput
  >;
  connect?: Maybe<
    PartyCartItemWhereUniqueInput[] | PartyCartItemWhereUniqueInput
  >;
}

export interface FriendInvitationUpdateWithoutUserDataInput {
  invitedBy?: Maybe<UserUpdateOneRequiredInput>;
  invitedUserId?: Maybe<String>;
}

export interface PartyCartItemCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  cart: PartyCartCreateOneWithoutItemsInput;
  name: String;
  description: String;
  price: Float;
  status: PartyCartItemStatus;
  quantity?: Maybe<Int>;
}

export interface FriendInvitationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  invitedBy?: Maybe<UserWhereInput>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  invitedUserId?: Maybe<String>;
  invitedUserId_not?: Maybe<String>;
  invitedUserId_in?: Maybe<String[] | String>;
  invitedUserId_not_in?: Maybe<String[] | String>;
  invitedUserId_lt?: Maybe<String>;
  invitedUserId_lte?: Maybe<String>;
  invitedUserId_gt?: Maybe<String>;
  invitedUserId_gte?: Maybe<String>;
  invitedUserId_contains?: Maybe<String>;
  invitedUserId_not_contains?: Maybe<String>;
  invitedUserId_starts_with?: Maybe<String>;
  invitedUserId_not_starts_with?: Maybe<String>;
  invitedUserId_ends_with?: Maybe<String>;
  invitedUserId_not_ends_with?: Maybe<String>;
  AND?: Maybe<FriendInvitationWhereInput[] | FriendInvitationWhereInput>;
  OR?: Maybe<FriendInvitationWhereInput[] | FriendInvitationWhereInput>;
  NOT?: Maybe<FriendInvitationWhereInput[] | FriendInvitationWhereInput>;
}

export interface PartyCartCreateOneWithoutItemsInput {
  create?: Maybe<PartyCartCreateWithoutItemsInput>;
  connect?: Maybe<PartyCartWhereUniqueInput>;
}

export interface PartyInvitationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  invitedBy?: Maybe<UserWhereInput>;
  user?: Maybe<UserWhereInput>;
  party?: Maybe<PartyWhereInput>;
  invitedUserId?: Maybe<String>;
  invitedUserId_not?: Maybe<String>;
  invitedUserId_in?: Maybe<String[] | String>;
  invitedUserId_not_in?: Maybe<String[] | String>;
  invitedUserId_lt?: Maybe<String>;
  invitedUserId_lte?: Maybe<String>;
  invitedUserId_gt?: Maybe<String>;
  invitedUserId_gte?: Maybe<String>;
  invitedUserId_contains?: Maybe<String>;
  invitedUserId_not_contains?: Maybe<String>;
  invitedUserId_starts_with?: Maybe<String>;
  invitedUserId_not_starts_with?: Maybe<String>;
  invitedUserId_ends_with?: Maybe<String>;
  invitedUserId_not_ends_with?: Maybe<String>;
  partyId?: Maybe<String>;
  partyId_not?: Maybe<String>;
  partyId_in?: Maybe<String[] | String>;
  partyId_not_in?: Maybe<String[] | String>;
  partyId_lt?: Maybe<String>;
  partyId_lte?: Maybe<String>;
  partyId_gt?: Maybe<String>;
  partyId_gte?: Maybe<String>;
  partyId_contains?: Maybe<String>;
  partyId_not_contains?: Maybe<String>;
  partyId_starts_with?: Maybe<String>;
  partyId_not_starts_with?: Maybe<String>;
  partyId_ends_with?: Maybe<String>;
  partyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PartyInvitationWhereInput[] | PartyInvitationWhereInput>;
  OR?: Maybe<PartyInvitationWhereInput[] | PartyInvitationWhereInput>;
  NOT?: Maybe<PartyInvitationWhereInput[] | PartyInvitationWhereInput>;
}

export interface PartyCartCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  party: PartyCreateOneWithoutCartInput;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<UserWhereInput>;
  chat?: Maybe<ChatWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface PartyCreateOneWithoutCartInput {
  create?: Maybe<PartyCreateWithoutCartInput>;
  connect?: Maybe<PartyWhereUniqueInput>;
}

export interface PartyCartItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cart?: Maybe<PartyCartWhereInput>;
  user?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  status?: Maybe<PartyCartItemStatus>;
  status_not?: Maybe<PartyCartItemStatus>;
  status_in?: Maybe<PartyCartItemStatus[] | PartyCartItemStatus>;
  status_not_in?: Maybe<PartyCartItemStatus[] | PartyCartItemStatus>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<PartyCartItemWhereInput[] | PartyCartItemWhereInput>;
  OR?: Maybe<PartyCartItemWhereInput[] | PartyCartItemWhereInput>;
  NOT?: Maybe<PartyCartItemWhereInput[] | PartyCartItemWhereInput>;
}

export interface PartyCreateWithoutCartInput {
  id?: Maybe<ID_Input>;
  title: String;
  normalizedTitle: String;
  description: String;
  author: UserCreateOneInput;
  location: LocationCreateOneInput;
  games?: Maybe<GameCreateManyInput>;
  colorTint: String;
  isPublic?: Maybe<Boolean>;
  members?: Maybe<UserCreateManyWithoutPartiesInput>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret: String;
  playlist?: Maybe<PlaylistCreateManyWithoutPartiesInput>;
  savedTracks?: Maybe<PartySavedTrackCreateManyWithoutPartyInput>;
}

export interface PlaylistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlaylistWhereInput>;
  AND?: Maybe<
    PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput
  >;
  OR?: Maybe<PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput>;
  NOT?: Maybe<
    PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput
  >;
}

export interface PartySavedTrackCreateManyWithoutPartyInput {
  create?: Maybe<
    | PartySavedTrackCreateWithoutPartyInput[]
    | PartySavedTrackCreateWithoutPartyInput
  >;
  connect?: Maybe<
    PartySavedTrackWhereUniqueInput[] | PartySavedTrackWhereUniqueInput
  >;
}

export interface LocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  placeName?: Maybe<String>;
  placeName_not?: Maybe<String>;
  placeName_in?: Maybe<String[] | String>;
  placeName_not_in?: Maybe<String[] | String>;
  placeName_lt?: Maybe<String>;
  placeName_lte?: Maybe<String>;
  placeName_gt?: Maybe<String>;
  placeName_gte?: Maybe<String>;
  placeName_contains?: Maybe<String>;
  placeName_not_contains?: Maybe<String>;
  placeName_starts_with?: Maybe<String>;
  placeName_not_starts_with?: Maybe<String>;
  placeName_ends_with?: Maybe<String>;
  placeName_not_ends_with?: Maybe<String>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export interface PartySavedTrackCreateWithoutPartyInput {
  id?: Maybe<ID_Input>;
  spotifyId: String;
  durationMs: Int;
  explicit: Boolean;
  name: String;
  previewUrl?: Maybe<String>;
  uri: String;
  stringArtists: String;
  length: String;
  popularity: Int;
  album: AlbumCreateOneInput;
}

export type ChatWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AlbumCreateOneInput {
  create?: Maybe<AlbumCreateInput>;
  connect?: Maybe<AlbumWhereUniqueInput>;
}

export interface PartySavedTrackWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  spotifyId?: Maybe<String>;
  spotifyId_not?: Maybe<String>;
  spotifyId_in?: Maybe<String[] | String>;
  spotifyId_not_in?: Maybe<String[] | String>;
  spotifyId_lt?: Maybe<String>;
  spotifyId_lte?: Maybe<String>;
  spotifyId_gt?: Maybe<String>;
  spotifyId_gte?: Maybe<String>;
  spotifyId_contains?: Maybe<String>;
  spotifyId_not_contains?: Maybe<String>;
  spotifyId_starts_with?: Maybe<String>;
  spotifyId_not_starts_with?: Maybe<String>;
  spotifyId_ends_with?: Maybe<String>;
  spotifyId_not_ends_with?: Maybe<String>;
  durationMs?: Maybe<Int>;
  durationMs_not?: Maybe<Int>;
  durationMs_in?: Maybe<Int[] | Int>;
  durationMs_not_in?: Maybe<Int[] | Int>;
  durationMs_lt?: Maybe<Int>;
  durationMs_lte?: Maybe<Int>;
  durationMs_gt?: Maybe<Int>;
  durationMs_gte?: Maybe<Int>;
  explicit?: Maybe<Boolean>;
  explicit_not?: Maybe<Boolean>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  previewUrl?: Maybe<String>;
  previewUrl_not?: Maybe<String>;
  previewUrl_in?: Maybe<String[] | String>;
  previewUrl_not_in?: Maybe<String[] | String>;
  previewUrl_lt?: Maybe<String>;
  previewUrl_lte?: Maybe<String>;
  previewUrl_gt?: Maybe<String>;
  previewUrl_gte?: Maybe<String>;
  previewUrl_contains?: Maybe<String>;
  previewUrl_not_contains?: Maybe<String>;
  previewUrl_starts_with?: Maybe<String>;
  previewUrl_not_starts_with?: Maybe<String>;
  previewUrl_ends_with?: Maybe<String>;
  previewUrl_not_ends_with?: Maybe<String>;
  uri?: Maybe<String>;
  uri_not?: Maybe<String>;
  uri_in?: Maybe<String[] | String>;
  uri_not_in?: Maybe<String[] | String>;
  uri_lt?: Maybe<String>;
  uri_lte?: Maybe<String>;
  uri_gt?: Maybe<String>;
  uri_gte?: Maybe<String>;
  uri_contains?: Maybe<String>;
  uri_not_contains?: Maybe<String>;
  uri_starts_with?: Maybe<String>;
  uri_not_starts_with?: Maybe<String>;
  uri_ends_with?: Maybe<String>;
  uri_not_ends_with?: Maybe<String>;
  party?: Maybe<PartyWhereInput>;
  stringArtists?: Maybe<String>;
  stringArtists_not?: Maybe<String>;
  stringArtists_in?: Maybe<String[] | String>;
  stringArtists_not_in?: Maybe<String[] | String>;
  stringArtists_lt?: Maybe<String>;
  stringArtists_lte?: Maybe<String>;
  stringArtists_gt?: Maybe<String>;
  stringArtists_gte?: Maybe<String>;
  stringArtists_contains?: Maybe<String>;
  stringArtists_not_contains?: Maybe<String>;
  stringArtists_starts_with?: Maybe<String>;
  stringArtists_not_starts_with?: Maybe<String>;
  stringArtists_ends_with?: Maybe<String>;
  stringArtists_not_ends_with?: Maybe<String>;
  length?: Maybe<String>;
  length_not?: Maybe<String>;
  length_in?: Maybe<String[] | String>;
  length_not_in?: Maybe<String[] | String>;
  length_lt?: Maybe<String>;
  length_lte?: Maybe<String>;
  length_gt?: Maybe<String>;
  length_gte?: Maybe<String>;
  length_contains?: Maybe<String>;
  length_not_contains?: Maybe<String>;
  length_starts_with?: Maybe<String>;
  length_not_starts_with?: Maybe<String>;
  length_ends_with?: Maybe<String>;
  length_not_ends_with?: Maybe<String>;
  popularity?: Maybe<Int>;
  popularity_not?: Maybe<Int>;
  popularity_in?: Maybe<Int[] | Int>;
  popularity_not_in?: Maybe<Int[] | Int>;
  popularity_lt?: Maybe<Int>;
  popularity_lte?: Maybe<Int>;
  popularity_gt?: Maybe<Int>;
  popularity_gte?: Maybe<Int>;
  album?: Maybe<AlbumWhereInput>;
  AND?: Maybe<PartySavedTrackWhereInput[] | PartySavedTrackWhereInput>;
  OR?: Maybe<PartySavedTrackWhereInput[] | PartySavedTrackWhereInput>;
  NOT?: Maybe<PartySavedTrackWhereInput[] | PartySavedTrackWhereInput>;
}

export interface PartyCartCreateOneWithoutPartyInput {
  create?: Maybe<PartyCartCreateWithoutPartyInput>;
  connect?: Maybe<PartyCartWhereUniqueInput>;
}

export interface PartyCartItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PartyCartItemWhereInput>;
  AND?: Maybe<
    PartyCartItemSubscriptionWhereInput[] | PartyCartItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    PartyCartItemSubscriptionWhereInput[] | PartyCartItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PartyCartItemSubscriptionWhereInput[] | PartyCartItemSubscriptionWhereInput
  >;
}

export interface PartyCartCreateWithoutPartyInput {
  id?: Maybe<ID_Input>;
  items?: Maybe<PartyCartItemCreateManyWithoutCartInput>;
}

export interface PartySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PartyWhereInput>;
  AND?: Maybe<PartySubscriptionWhereInput[] | PartySubscriptionWhereInput>;
  OR?: Maybe<PartySubscriptionWhereInput[] | PartySubscriptionWhereInput>;
  NOT?: Maybe<PartySubscriptionWhereInput[] | PartySubscriptionWhereInput>;
}

export interface PartyCartItemCreateManyWithoutCartInput {
  create?: Maybe<
    PartyCartItemCreateWithoutCartInput[] | PartyCartItemCreateWithoutCartInput
  >;
  connect?: Maybe<
    PartyCartItemWhereUniqueInput[] | PartyCartItemWhereUniqueInput
  >;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface PartyCartItemCreateWithoutCartInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutCartItemsInput;
  name: String;
  description: String;
  price: Float;
  status: PartyCartItemStatus;
  quantity?: Maybe<Int>;
}

export type ArtistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateOneWithoutCartItemsInput {
  create?: Maybe<UserCreateWithoutCartItemsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GameWhereInput>;
  AND?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  OR?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  NOT?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
}

export interface UserCreateWithoutCartItemsInput {
  id?: Maybe<ID_Input>;
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  parties?: Maybe<PartyCreateManyWithoutMembersInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationCreateManyWithoutUserInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationCreateManyWithoutUserInput>;
  chats?: Maybe<ChatCreateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
}

export interface ChatSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChatWhereInput>;
  AND?: Maybe<ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput>;
  OR?: Maybe<ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput>;
  NOT?: Maybe<ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput>;
}

export interface UserCreateManyWithoutChatsInput {
  create?: Maybe<UserCreateWithoutChatsInput[] | UserCreateWithoutChatsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface AlbumSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AlbumWhereInput>;
  AND?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
  OR?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
  NOT?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
}

export interface UserCreateWithoutChatsInput {
  id?: Maybe<ID_Input>;
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  parties?: Maybe<PartyCreateManyWithoutMembersInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationCreateManyWithoutUserInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationCreateManyWithoutUserInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  parties?: Maybe<PartyUpdateManyWithoutMembersInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationUpdateManyWithoutUserInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationUpdateManyWithoutUserInput>;
  chats?: Maybe<ChatUpdateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemUpdateManyWithoutUserInput>;
}

export interface ChatUpdateInput {
  party?: Maybe<PartyUpdateOneRequiredInput>;
  members?: Maybe<UserUpdateManyWithoutChatsInput>;
  messages?: Maybe<MessageUpdateManyWithoutChatInput>;
}

export interface ArtistUpdateManyDataInput {
  spotifyId?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  name?: Maybe<String>;
}

export interface PartyUpdateOneRequiredInput {
  create?: Maybe<PartyCreateInput>;
  update?: Maybe<PartyUpdateDataInput>;
  upsert?: Maybe<PartyUpsertNestedInput>;
  connect?: Maybe<PartyWhereUniqueInput>;
}

export interface ArtistScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  spotifyId?: Maybe<ID_Input>;
  spotifyId_not?: Maybe<ID_Input>;
  spotifyId_in?: Maybe<ID_Input[] | ID_Input>;
  spotifyId_not_in?: Maybe<ID_Input[] | ID_Input>;
  spotifyId_lt?: Maybe<ID_Input>;
  spotifyId_lte?: Maybe<ID_Input>;
  spotifyId_gt?: Maybe<ID_Input>;
  spotifyId_gte?: Maybe<ID_Input>;
  spotifyId_contains?: Maybe<ID_Input>;
  spotifyId_not_contains?: Maybe<ID_Input>;
  spotifyId_starts_with?: Maybe<ID_Input>;
  spotifyId_not_starts_with?: Maybe<ID_Input>;
  spotifyId_ends_with?: Maybe<ID_Input>;
  spotifyId_not_ends_with?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  uri_not?: Maybe<String>;
  uri_in?: Maybe<String[] | String>;
  uri_not_in?: Maybe<String[] | String>;
  uri_lt?: Maybe<String>;
  uri_lte?: Maybe<String>;
  uri_gt?: Maybe<String>;
  uri_gte?: Maybe<String>;
  uri_contains?: Maybe<String>;
  uri_not_contains?: Maybe<String>;
  uri_starts_with?: Maybe<String>;
  uri_not_starts_with?: Maybe<String>;
  uri_ends_with?: Maybe<String>;
  uri_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  OR?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  NOT?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
}

export interface PartyUpdateDataInput {
  title?: Maybe<String>;
  normalizedTitle?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
  location?: Maybe<LocationUpdateOneRequiredInput>;
  games?: Maybe<GameUpdateManyInput>;
  colorTint?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  members?: Maybe<UserUpdateManyWithoutPartiesInput>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret?: Maybe<String>;
  playlist?: Maybe<PlaylistUpdateManyWithoutPartiesInput>;
  savedTracks?: Maybe<PartySavedTrackUpdateManyWithoutPartyInput>;
  cart?: Maybe<PartyCartUpdateOneRequiredWithoutPartyInput>;
}

export interface ArtistUpdateDataInput {
  spotifyId?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ArtistUpdateWithWhereUniqueNestedInput {
  where: ArtistWhereUniqueInput;
  data: ArtistUpdateDataInput;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  parties?: Maybe<PartyUpdateManyWithoutMembersInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationUpdateManyWithoutUserInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationUpdateManyWithoutUserInput>;
  chats?: Maybe<ChatUpdateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemUpdateManyWithoutUserInput>;
}

export interface TrackUpdateInput {
  name?: Maybe<String>;
  album?: Maybe<AlbumUpdateOneRequiredInput>;
  artists?: Maybe<ArtistUpdateManyInput>;
  duration?: Maybe<Int>;
  preview_url?: Maybe<String>;
}

export interface PartyUpdateManyWithoutMembersInput {
  create?: Maybe<
    PartyCreateWithoutMembersInput[] | PartyCreateWithoutMembersInput
  >;
  delete?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  connect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  set?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  disconnect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  update?: Maybe<
    | PartyUpdateWithWhereUniqueWithoutMembersInput[]
    | PartyUpdateWithWhereUniqueWithoutMembersInput
  >;
  upsert?: Maybe<
    | PartyUpsertWithWhereUniqueWithoutMembersInput[]
    | PartyUpsertWithWhereUniqueWithoutMembersInput
  >;
  deleteMany?: Maybe<PartyScalarWhereInput[] | PartyScalarWhereInput>;
  updateMany?: Maybe<
    PartyUpdateManyWithWhereNestedInput[] | PartyUpdateManyWithWhereNestedInput
  >;
}

export interface ArtistCreateManyInput {
  create?: Maybe<ArtistCreateInput[] | ArtistCreateInput>;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
}

export interface PartyUpdateWithWhereUniqueWithoutMembersInput {
  where: PartyWhereUniqueInput;
  data: PartyUpdateWithoutMembersDataInput;
}

export interface PlaylistUpdateManyMutationInput {
  spotifyId?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  spotifyExternalUrl?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  importable?: Maybe<Boolean>;
}

export interface PartyUpdateWithoutMembersDataInput {
  title?: Maybe<String>;
  normalizedTitle?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
  location?: Maybe<LocationUpdateOneRequiredInput>;
  games?: Maybe<GameUpdateManyInput>;
  colorTint?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret?: Maybe<String>;
  playlist?: Maybe<PlaylistUpdateManyWithoutPartiesInput>;
  savedTracks?: Maybe<PartySavedTrackUpdateManyWithoutPartyInput>;
  cart?: Maybe<PartyCartUpdateOneRequiredWithoutPartyInput>;
}

export interface PartyUpsertWithWhereUniqueWithoutPlaylistInput {
  where: PartyWhereUniqueInput;
  update: PartyUpdateWithoutPlaylistDataInput;
  create: PartyCreateWithoutPlaylistInput;
}

export interface LocationUpdateOneRequiredInput {
  create?: Maybe<LocationCreateInput>;
  update?: Maybe<LocationUpdateDataInput>;
  upsert?: Maybe<LocationUpsertNestedInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface PartyUpdateWithoutPlaylistDataInput {
  title?: Maybe<String>;
  normalizedTitle?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
  location?: Maybe<LocationUpdateOneRequiredInput>;
  games?: Maybe<GameUpdateManyInput>;
  colorTint?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  members?: Maybe<UserUpdateManyWithoutPartiesInput>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret?: Maybe<String>;
  savedTracks?: Maybe<PartySavedTrackUpdateManyWithoutPartyInput>;
  cart?: Maybe<PartyCartUpdateOneRequiredWithoutPartyInput>;
}

export interface LocationUpdateDataInput {
  placeName?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface PartyUpdateManyWithoutPlaylistInput {
  create?: Maybe<
    PartyCreateWithoutPlaylistInput[] | PartyCreateWithoutPlaylistInput
  >;
  delete?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  connect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  set?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  disconnect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  update?: Maybe<
    | PartyUpdateWithWhereUniqueWithoutPlaylistInput[]
    | PartyUpdateWithWhereUniqueWithoutPlaylistInput
  >;
  upsert?: Maybe<
    | PartyUpsertWithWhereUniqueWithoutPlaylistInput[]
    | PartyUpsertWithWhereUniqueWithoutPlaylistInput
  >;
  deleteMany?: Maybe<PartyScalarWhereInput[] | PartyScalarWhereInput>;
  updateMany?: Maybe<
    PartyUpdateManyWithWhereNestedInput[] | PartyUpdateManyWithWhereNestedInput
  >;
}

export interface LocationUpsertNestedInput {
  update: LocationUpdateDataInput;
  create: LocationCreateInput;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GameUpdateManyInput {
  create?: Maybe<GameCreateInput[] | GameCreateInput>;
  update?: Maybe<
    | GameUpdateWithWhereUniqueNestedInput[]
    | GameUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | GameUpsertWithWhereUniqueNestedInput[]
    | GameUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  set?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  disconnect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  deleteMany?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  updateMany?: Maybe<
    GameUpdateManyWithWhereNestedInput[] | GameUpdateManyWithWhereNestedInput
  >;
}

export interface PartyCreateManyWithoutPlaylistInput {
  create?: Maybe<
    PartyCreateWithoutPlaylistInput[] | PartyCreateWithoutPlaylistInput
  >;
  connect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
}

export interface GameUpdateWithWhereUniqueNestedInput {
  where: GameWhereUniqueInput;
  data: GameUpdateDataInput;
}

export interface PartySavedTrackUpdateManyMutationInput {
  spotifyId?: Maybe<String>;
  durationMs?: Maybe<Int>;
  explicit?: Maybe<Boolean>;
  name?: Maybe<String>;
  previewUrl?: Maybe<String>;
  uri?: Maybe<String>;
  stringArtists?: Maybe<String>;
  length?: Maybe<String>;
  popularity?: Maybe<Int>;
}

export interface GameUpdateDataInput {
  title?: Maybe<String>;
  cover?: Maybe<String>;
  type?: Maybe<GameType>;
}

export interface PartySavedTrackUpdateInput {
  spotifyId?: Maybe<String>;
  durationMs?: Maybe<Int>;
  explicit?: Maybe<Boolean>;
  name?: Maybe<String>;
  previewUrl?: Maybe<String>;
  uri?: Maybe<String>;
  party?: Maybe<PartyUpdateOneRequiredWithoutSavedTracksInput>;
  stringArtists?: Maybe<String>;
  length?: Maybe<String>;
  popularity?: Maybe<Int>;
  album?: Maybe<AlbumUpdateOneRequiredInput>;
}

export interface GameUpsertWithWhereUniqueNestedInput {
  where: GameWhereUniqueInput;
  update: GameUpdateDataInput;
  create: GameCreateInput;
}

export interface UserUpsertWithoutPendingPartyInvitationsInput {
  update: UserUpdateWithoutPendingPartyInvitationsDataInput;
  create: UserCreateWithoutPendingPartyInvitationsInput;
}

export interface GameScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  cover?: Maybe<String>;
  cover_not?: Maybe<String>;
  cover_in?: Maybe<String[] | String>;
  cover_not_in?: Maybe<String[] | String>;
  cover_lt?: Maybe<String>;
  cover_lte?: Maybe<String>;
  cover_gt?: Maybe<String>;
  cover_gte?: Maybe<String>;
  cover_contains?: Maybe<String>;
  cover_not_contains?: Maybe<String>;
  cover_starts_with?: Maybe<String>;
  cover_not_starts_with?: Maybe<String>;
  cover_ends_with?: Maybe<String>;
  cover_not_ends_with?: Maybe<String>;
  type?: Maybe<GameType>;
  type_not?: Maybe<GameType>;
  type_in?: Maybe<GameType[] | GameType>;
  type_not_in?: Maybe<GameType[] | GameType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  OR?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  NOT?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
}

export interface UserUpdateWithoutPendingPartyInvitationsDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  parties?: Maybe<PartyUpdateManyWithoutMembersInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationUpdateManyWithoutUserInput>;
  chats?: Maybe<ChatUpdateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemUpdateManyWithoutUserInput>;
}

export interface GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput;
  data: GameUpdateManyDataInput;
}

export interface PartyInvitationUpdateInput {
  invitedBy?: Maybe<UserUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutPendingPartyInvitationsInput>;
  party?: Maybe<PartyUpdateOneRequiredInput>;
  invitedUserId?: Maybe<String>;
  partyId?: Maybe<String>;
}

export interface GameUpdateManyDataInput {
  title?: Maybe<String>;
  cover?: Maybe<String>;
  type?: Maybe<GameType>;
}

export interface AlbumWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  spotifyId?: Maybe<ID_Input>;
  spotifyId_not?: Maybe<ID_Input>;
  spotifyId_in?: Maybe<ID_Input[] | ID_Input>;
  spotifyId_not_in?: Maybe<ID_Input[] | ID_Input>;
  spotifyId_lt?: Maybe<ID_Input>;
  spotifyId_lte?: Maybe<ID_Input>;
  spotifyId_gt?: Maybe<ID_Input>;
  spotifyId_gte?: Maybe<ID_Input>;
  spotifyId_contains?: Maybe<ID_Input>;
  spotifyId_not_contains?: Maybe<ID_Input>;
  spotifyId_starts_with?: Maybe<ID_Input>;
  spotifyId_not_starts_with?: Maybe<ID_Input>;
  spotifyId_ends_with?: Maybe<ID_Input>;
  spotifyId_not_ends_with?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  uri_not?: Maybe<String>;
  uri_in?: Maybe<String[] | String>;
  uri_not_in?: Maybe<String[] | String>;
  uri_lt?: Maybe<String>;
  uri_lte?: Maybe<String>;
  uri_gt?: Maybe<String>;
  uri_gte?: Maybe<String>;
  uri_contains?: Maybe<String>;
  uri_not_contains?: Maybe<String>;
  uri_starts_with?: Maybe<String>;
  uri_not_starts_with?: Maybe<String>;
  uri_ends_with?: Maybe<String>;
  uri_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  releaseDate?: Maybe<String>;
  releaseDate_not?: Maybe<String>;
  releaseDate_in?: Maybe<String[] | String>;
  releaseDate_not_in?: Maybe<String[] | String>;
  releaseDate_lt?: Maybe<String>;
  releaseDate_lte?: Maybe<String>;
  releaseDate_gt?: Maybe<String>;
  releaseDate_gte?: Maybe<String>;
  releaseDate_contains?: Maybe<String>;
  releaseDate_not_contains?: Maybe<String>;
  releaseDate_starts_with?: Maybe<String>;
  releaseDate_not_starts_with?: Maybe<String>;
  releaseDate_ends_with?: Maybe<String>;
  releaseDate_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  AND?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
  OR?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
  NOT?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
}

export interface PlaylistUpdateManyWithoutPartiesInput {
  create?: Maybe<
    PlaylistCreateWithoutPartiesInput[] | PlaylistCreateWithoutPartiesInput
  >;
  delete?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  connect?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  set?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  disconnect?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  update?: Maybe<
    | PlaylistUpdateWithWhereUniqueWithoutPartiesInput[]
    | PlaylistUpdateWithWhereUniqueWithoutPartiesInput
  >;
  upsert?: Maybe<
    | PlaylistUpsertWithWhereUniqueWithoutPartiesInput[]
    | PlaylistUpsertWithWhereUniqueWithoutPartiesInput
  >;
  deleteMany?: Maybe<PlaylistScalarWhereInput[] | PlaylistScalarWhereInput>;
  updateMany?: Maybe<
    | PlaylistUpdateManyWithWhereNestedInput[]
    | PlaylistUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneWithoutPendingPartyInvitationsInput {
  create?: Maybe<UserCreateWithoutPendingPartyInvitationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PlaylistUpdateWithWhereUniqueWithoutPartiesInput {
  where: PlaylistWhereUniqueInput;
  data: PlaylistUpdateWithoutPartiesDataInput;
}

export type PartyCartItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PlaylistUpdateWithoutPartiesDataInput {
  spotifyId?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  spotifyExternalUrl?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  tracks?: Maybe<PartySavedTrackUpdateManyInput>;
  importable?: Maybe<Boolean>;
}

export interface PartyCartItemUpdateInput {
  cart?: Maybe<PartyCartUpdateOneRequiredWithoutItemsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutCartItemsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Float>;
  status?: Maybe<PartyCartItemStatus>;
  quantity?: Maybe<Int>;
}

export interface PartySavedTrackUpdateManyInput {
  create?: Maybe<PartySavedTrackCreateInput[] | PartySavedTrackCreateInput>;
  update?: Maybe<
    | PartySavedTrackUpdateWithWhereUniqueNestedInput[]
    | PartySavedTrackUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PartySavedTrackUpsertWithWhereUniqueNestedInput[]
    | PartySavedTrackUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    PartySavedTrackWhereUniqueInput[] | PartySavedTrackWhereUniqueInput
  >;
  connect?: Maybe<
    PartySavedTrackWhereUniqueInput[] | PartySavedTrackWhereUniqueInput
  >;
  set?: Maybe<
    PartySavedTrackWhereUniqueInput[] | PartySavedTrackWhereUniqueInput
  >;
  disconnect?: Maybe<
    PartySavedTrackWhereUniqueInput[] | PartySavedTrackWhereUniqueInput
  >;
  deleteMany?: Maybe<
    PartySavedTrackScalarWhereInput[] | PartySavedTrackScalarWhereInput
  >;
  updateMany?: Maybe<
    | PartySavedTrackUpdateManyWithWhereNestedInput[]
    | PartySavedTrackUpdateManyWithWhereNestedInput
  >;
}

export type PartyInvitationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PartySavedTrackUpdateWithWhereUniqueNestedInput {
  where: PartySavedTrackWhereUniqueInput;
  data: PartySavedTrackUpdateDataInput;
}

export interface PartyCartCreateInput {
  id?: Maybe<ID_Input>;
  party: PartyCreateOneWithoutCartInput;
  items?: Maybe<PartyCartItemCreateManyWithoutCartInput>;
}

export interface FriendInvitationUpdateManyMutationInput {
  invitedUserId?: Maybe<String>;
}

export type PartySavedTrackWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PartyUpdateOneRequiredWithoutSavedTracksInput {
  create?: Maybe<PartyCreateWithoutSavedTracksInput>;
  update?: Maybe<PartyUpdateWithoutSavedTracksDataInput>;
  upsert?: Maybe<PartyUpsertWithoutSavedTracksInput>;
  connect?: Maybe<PartyWhereUniqueInput>;
}

export interface MessageUpdateManyMutationInput {
  content?: Maybe<String>;
}

export interface PartyUpdateWithoutSavedTracksDataInput {
  title?: Maybe<String>;
  normalizedTitle?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
  location?: Maybe<LocationUpdateOneRequiredInput>;
  games?: Maybe<GameUpdateManyInput>;
  colorTint?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  members?: Maybe<UserUpdateManyWithoutPartiesInput>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret?: Maybe<String>;
  playlist?: Maybe<PlaylistUpdateManyWithoutPartiesInput>;
  cart?: Maybe<PartyCartUpdateOneRequiredWithoutPartyInput>;
}

export type PlaylistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  spotifyId?: Maybe<ID_Input>;
}>;

export interface UserUpdateManyWithoutPartiesInput {
  create?: Maybe<
    UserCreateWithoutPartiesInput[] | UserCreateWithoutPartiesInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutPartiesInput[]
    | UserUpdateWithWhereUniqueWithoutPartiesInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutPartiesInput[]
    | UserUpsertWithWhereUniqueWithoutPartiesInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface ChatUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<ChatCreateWithoutMessagesInput>;
  update?: Maybe<ChatUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<ChatUpsertWithoutMessagesInput>;
  connect?: Maybe<ChatWhereUniqueInput>;
}

export interface UserUpdateWithWhereUniqueWithoutPartiesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutPartiesDataInput;
}

export type TrackWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateWithoutPartiesDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationUpdateManyWithoutUserInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationUpdateManyWithoutUserInput>;
  chats?: Maybe<ChatUpdateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemUpdateManyWithoutUserInput>;
}

export interface TrackWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  album?: Maybe<AlbumWhereInput>;
  artists_every?: Maybe<ArtistWhereInput>;
  artists_some?: Maybe<ArtistWhereInput>;
  artists_none?: Maybe<ArtistWhereInput>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  preview_url?: Maybe<String>;
  preview_url_not?: Maybe<String>;
  preview_url_in?: Maybe<String[] | String>;
  preview_url_not_in?: Maybe<String[] | String>;
  preview_url_lt?: Maybe<String>;
  preview_url_lte?: Maybe<String>;
  preview_url_gt?: Maybe<String>;
  preview_url_gte?: Maybe<String>;
  preview_url_contains?: Maybe<String>;
  preview_url_not_contains?: Maybe<String>;
  preview_url_starts_with?: Maybe<String>;
  preview_url_not_starts_with?: Maybe<String>;
  preview_url_ends_with?: Maybe<String>;
  preview_url_not_ends_with?: Maybe<String>;
  AND?: Maybe<TrackWhereInput[] | TrackWhereInput>;
  OR?: Maybe<TrackWhereInput[] | TrackWhereInput>;
  NOT?: Maybe<TrackWhereInput[] | TrackWhereInput>;
}

export interface UserUpdateManyWithoutFriendsInput {
  create?: Maybe<
    UserCreateWithoutFriendsInput[] | UserCreateWithoutFriendsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFriendsInput[]
    | UserUpdateWithWhereUniqueWithoutFriendsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFriendsInput[]
    | UserUpsertWithWhereUniqueWithoutFriendsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneInput;
  chat: ChatCreateOneWithoutMessagesInput;
  content: String;
}

export interface UserUpdateWithWhereUniqueWithoutFriendsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFriendsDataInput;
}

export interface LocationUpdateInput {
  placeName?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface UserUpdateWithoutFriendsDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  parties?: Maybe<PartyUpdateManyWithoutMembersInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationUpdateManyWithoutUserInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationUpdateManyWithoutUserInput>;
  chats?: Maybe<ChatUpdateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemUpdateManyWithoutUserInput>;
}

export interface ImageUpdateManyMutationInput {
  height?: Maybe<Int>;
  width?: Maybe<Int>;
  url?: Maybe<String>;
}

export interface FriendInvitationUpdateManyWithoutUserInput {
  create?: Maybe<
    | FriendInvitationCreateWithoutUserInput[]
    | FriendInvitationCreateWithoutUserInput
  >;
  delete?: Maybe<
    FriendInvitationWhereUniqueInput[] | FriendInvitationWhereUniqueInput
  >;
  connect?: Maybe<
    FriendInvitationWhereUniqueInput[] | FriendInvitationWhereUniqueInput
  >;
  set?: Maybe<
    FriendInvitationWhereUniqueInput[] | FriendInvitationWhereUniqueInput
  >;
  disconnect?: Maybe<
    FriendInvitationWhereUniqueInput[] | FriendInvitationWhereUniqueInput
  >;
  update?: Maybe<
    | FriendInvitationUpdateWithWhereUniqueWithoutUserInput[]
    | FriendInvitationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | FriendInvitationUpsertWithWhereUniqueWithoutUserInput[]
    | FriendInvitationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    FriendInvitationScalarWhereInput[] | FriendInvitationScalarWhereInput
  >;
  updateMany?: Maybe<
    | FriendInvitationUpdateManyWithWhereNestedInput[]
    | FriendInvitationUpdateManyWithWhereNestedInput
  >;
}

export interface ImageCreateInput {
  id?: Maybe<ID_Input>;
  height: Int;
  width: Int;
  url: String;
}

export interface FriendInvitationUpdateWithWhereUniqueWithoutUserInput {
  where: FriendInvitationWhereUniqueInput;
  data: FriendInvitationUpdateWithoutUserDataInput;
}

export interface AlbumCreateInput {
  id?: Maybe<ID_Input>;
  spotifyId: ID_Input;
  uri: String;
  name: String;
  releaseDate: String;
  imageUrl: String;
}

export interface PartyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  normalizedTitle?: Maybe<String>;
  normalizedTitle_not?: Maybe<String>;
  normalizedTitle_in?: Maybe<String[] | String>;
  normalizedTitle_not_in?: Maybe<String[] | String>;
  normalizedTitle_lt?: Maybe<String>;
  normalizedTitle_lte?: Maybe<String>;
  normalizedTitle_gt?: Maybe<String>;
  normalizedTitle_gte?: Maybe<String>;
  normalizedTitle_contains?: Maybe<String>;
  normalizedTitle_not_contains?: Maybe<String>;
  normalizedTitle_starts_with?: Maybe<String>;
  normalizedTitle_not_starts_with?: Maybe<String>;
  normalizedTitle_ends_with?: Maybe<String>;
  normalizedTitle_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  location?: Maybe<LocationWhereInput>;
  games_every?: Maybe<GameWhereInput>;
  games_some?: Maybe<GameWhereInput>;
  games_none?: Maybe<GameWhereInput>;
  colorTint?: Maybe<String>;
  colorTint_not?: Maybe<String>;
  colorTint_in?: Maybe<String[] | String>;
  colorTint_not_in?: Maybe<String[] | String>;
  colorTint_lt?: Maybe<String>;
  colorTint_lte?: Maybe<String>;
  colorTint_gt?: Maybe<String>;
  colorTint_gte?: Maybe<String>;
  colorTint_contains?: Maybe<String>;
  colorTint_not_contains?: Maybe<String>;
  colorTint_starts_with?: Maybe<String>;
  colorTint_not_starts_with?: Maybe<String>;
  colorTint_ends_with?: Maybe<String>;
  colorTint_not_ends_with?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  isPublic_not?: Maybe<Boolean>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  start?: Maybe<DateTimeInput>;
  start_not?: Maybe<DateTimeInput>;
  start_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_lt?: Maybe<DateTimeInput>;
  start_lte?: Maybe<DateTimeInput>;
  start_gt?: Maybe<DateTimeInput>;
  start_gte?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  end_not?: Maybe<DateTimeInput>;
  end_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_lt?: Maybe<DateTimeInput>;
  end_lte?: Maybe<DateTimeInput>;
  end_gt?: Maybe<DateTimeInput>;
  end_gte?: Maybe<DateTimeInput>;
  inviteSecret?: Maybe<String>;
  inviteSecret_not?: Maybe<String>;
  inviteSecret_in?: Maybe<String[] | String>;
  inviteSecret_not_in?: Maybe<String[] | String>;
  inviteSecret_lt?: Maybe<String>;
  inviteSecret_lte?: Maybe<String>;
  inviteSecret_gt?: Maybe<String>;
  inviteSecret_gte?: Maybe<String>;
  inviteSecret_contains?: Maybe<String>;
  inviteSecret_not_contains?: Maybe<String>;
  inviteSecret_starts_with?: Maybe<String>;
  inviteSecret_not_starts_with?: Maybe<String>;
  inviteSecret_ends_with?: Maybe<String>;
  inviteSecret_not_ends_with?: Maybe<String>;
  playlist_every?: Maybe<PlaylistWhereInput>;
  playlist_some?: Maybe<PlaylistWhereInput>;
  playlist_none?: Maybe<PlaylistWhereInput>;
  savedTracks_every?: Maybe<PartySavedTrackWhereInput>;
  savedTracks_some?: Maybe<PartySavedTrackWhereInput>;
  savedTracks_none?: Maybe<PartySavedTrackWhereInput>;
  cart?: Maybe<PartyCartWhereInput>;
  AND?: Maybe<PartyWhereInput[] | PartyWhereInput>;
  OR?: Maybe<PartyWhereInput[] | PartyWhereInput>;
  NOT?: Maybe<PartyWhereInput[] | PartyWhereInput>;
}

export interface AlbumUpdateManyMutationInput {
  spotifyId?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  name?: Maybe<String>;
  releaseDate?: Maybe<String>;
  imageUrl?: Maybe<String>;
}

export interface FriendInvitationUpsertWithWhereUniqueWithoutUserInput {
  where: FriendInvitationWhereUniqueInput;
  update: FriendInvitationUpdateWithoutUserDataInput;
  create: FriendInvitationCreateWithoutUserInput;
}

export interface GameUpdateInput {
  title?: Maybe<String>;
  cover?: Maybe<String>;
  type?: Maybe<GameType>;
}

export interface FriendInvitationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  invitedUserId?: Maybe<String>;
  invitedUserId_not?: Maybe<String>;
  invitedUserId_in?: Maybe<String[] | String>;
  invitedUserId_not_in?: Maybe<String[] | String>;
  invitedUserId_lt?: Maybe<String>;
  invitedUserId_lte?: Maybe<String>;
  invitedUserId_gt?: Maybe<String>;
  invitedUserId_gte?: Maybe<String>;
  invitedUserId_contains?: Maybe<String>;
  invitedUserId_not_contains?: Maybe<String>;
  invitedUserId_starts_with?: Maybe<String>;
  invitedUserId_not_starts_with?: Maybe<String>;
  invitedUserId_ends_with?: Maybe<String>;
  invitedUserId_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    FriendInvitationScalarWhereInput[] | FriendInvitationScalarWhereInput
  >;
  OR?: Maybe<
    FriendInvitationScalarWhereInput[] | FriendInvitationScalarWhereInput
  >;
  NOT?: Maybe<
    FriendInvitationScalarWhereInput[] | FriendInvitationScalarWhereInput
  >;
}

export interface ArtistUpdateInput {
  spotifyId?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  name?: Maybe<String>;
}

export interface FriendInvitationUpdateManyWithWhereNestedInput {
  where: FriendInvitationScalarWhereInput;
  data: FriendInvitationUpdateManyDataInput;
}

export interface ChatCreateInput {
  id?: Maybe<ID_Input>;
  party: PartyCreateOneInput;
  members?: Maybe<UserCreateManyWithoutChatsInput>;
  messages?: Maybe<MessageCreateManyWithoutChatInput>;
}

export interface FriendInvitationUpdateManyDataInput {
  invitedUserId?: Maybe<String>;
}

export interface PartyCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  normalizedTitle: String;
  description: String;
  author: UserCreateOneInput;
  location: LocationCreateOneInput;
  games?: Maybe<GameCreateManyInput>;
  colorTint: String;
  isPublic?: Maybe<Boolean>;
  members?: Maybe<UserCreateManyWithoutPartiesInput>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret: String;
  playlist?: Maybe<PlaylistCreateManyWithoutPartiesInput>;
  savedTracks?: Maybe<PartySavedTrackCreateManyWithoutPartyInput>;
  cart: PartyCartCreateOneWithoutPartyInput;
}

export interface PartyInvitationUpdateManyWithoutUserInput {
  create?: Maybe<
    | PartyInvitationCreateWithoutUserInput[]
    | PartyInvitationCreateWithoutUserInput
  >;
  delete?: Maybe<
    PartyInvitationWhereUniqueInput[] | PartyInvitationWhereUniqueInput
  >;
  connect?: Maybe<
    PartyInvitationWhereUniqueInput[] | PartyInvitationWhereUniqueInput
  >;
  set?: Maybe<
    PartyInvitationWhereUniqueInput[] | PartyInvitationWhereUniqueInput
  >;
  disconnect?: Maybe<
    PartyInvitationWhereUniqueInput[] | PartyInvitationWhereUniqueInput
  >;
  update?: Maybe<
    | PartyInvitationUpdateWithWhereUniqueWithoutUserInput[]
    | PartyInvitationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PartyInvitationUpsertWithWhereUniqueWithoutUserInput[]
    | PartyInvitationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    PartyInvitationScalarWhereInput[] | PartyInvitationScalarWhereInput
  >;
  updateMany?: Maybe<
    | PartyInvitationUpdateManyWithWhereNestedInput[]
    | PartyInvitationUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  parties?: Maybe<PartyCreateManyWithoutMembersInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationCreateManyWithoutUserInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationCreateManyWithoutUserInput>;
  chats?: Maybe<ChatCreateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemCreateManyWithoutUserInput>;
}

export interface PartyInvitationUpdateWithWhereUniqueWithoutUserInput {
  where: PartyInvitationWhereUniqueInput;
  data: PartyInvitationUpdateWithoutUserDataInput;
}

export interface PartyCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  title: String;
  normalizedTitle: String;
  description: String;
  author: UserCreateOneInput;
  location: LocationCreateOneInput;
  games?: Maybe<GameCreateManyInput>;
  colorTint: String;
  isPublic?: Maybe<Boolean>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret: String;
  playlist?: Maybe<PlaylistCreateManyWithoutPartiesInput>;
  savedTracks?: Maybe<PartySavedTrackCreateManyWithoutPartyInput>;
  cart: PartyCartCreateOneWithoutPartyInput;
}

export interface PartyInvitationUpdateWithoutUserDataInput {
  invitedBy?: Maybe<UserUpdateOneRequiredInput>;
  party?: Maybe<PartyUpdateOneRequiredInput>;
  invitedUserId?: Maybe<String>;
  partyId?: Maybe<String>;
}

export interface LocationCreateInput {
  id?: Maybe<ID_Input>;
  placeName: String;
  latitude: Float;
  longitude: Float;
}

export interface PartyInvitationUpsertWithWhereUniqueWithoutUserInput {
  where: PartyInvitationWhereUniqueInput;
  update: PartyInvitationUpdateWithoutUserDataInput;
  create: PartyInvitationCreateWithoutUserInput;
}

export interface GameCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  cover?: Maybe<String>;
  type: GameType;
}

export interface PartyInvitationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  invitedUserId?: Maybe<String>;
  invitedUserId_not?: Maybe<String>;
  invitedUserId_in?: Maybe<String[] | String>;
  invitedUserId_not_in?: Maybe<String[] | String>;
  invitedUserId_lt?: Maybe<String>;
  invitedUserId_lte?: Maybe<String>;
  invitedUserId_gt?: Maybe<String>;
  invitedUserId_gte?: Maybe<String>;
  invitedUserId_contains?: Maybe<String>;
  invitedUserId_not_contains?: Maybe<String>;
  invitedUserId_starts_with?: Maybe<String>;
  invitedUserId_not_starts_with?: Maybe<String>;
  invitedUserId_ends_with?: Maybe<String>;
  invitedUserId_not_ends_with?: Maybe<String>;
  partyId?: Maybe<String>;
  partyId_not?: Maybe<String>;
  partyId_in?: Maybe<String[] | String>;
  partyId_not_in?: Maybe<String[] | String>;
  partyId_lt?: Maybe<String>;
  partyId_lte?: Maybe<String>;
  partyId_gt?: Maybe<String>;
  partyId_gte?: Maybe<String>;
  partyId_contains?: Maybe<String>;
  partyId_not_contains?: Maybe<String>;
  partyId_starts_with?: Maybe<String>;
  partyId_not_starts_with?: Maybe<String>;
  partyId_ends_with?: Maybe<String>;
  partyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    PartyInvitationScalarWhereInput[] | PartyInvitationScalarWhereInput
  >;
  OR?: Maybe<
    PartyInvitationScalarWhereInput[] | PartyInvitationScalarWhereInput
  >;
  NOT?: Maybe<
    PartyInvitationScalarWhereInput[] | PartyInvitationScalarWhereInput
  >;
}

export interface PlaylistCreateWithoutPartiesInput {
  id?: Maybe<ID_Input>;
  spotifyId: ID_Input;
  uri: String;
  spotifyExternalUrl: String;
  user: UserCreateOneInput;
  name: String;
  imageUrl: String;
  tracks?: Maybe<PartySavedTrackCreateManyInput>;
  importable?: Maybe<Boolean>;
}

export interface PartyInvitationUpdateManyWithWhereNestedInput {
  where: PartyInvitationScalarWhereInput;
  data: PartyInvitationUpdateManyDataInput;
}

export interface PartySavedTrackCreateInput {
  id?: Maybe<ID_Input>;
  spotifyId: String;
  durationMs: Int;
  explicit: Boolean;
  name: String;
  previewUrl?: Maybe<String>;
  uri: String;
  party: PartyCreateOneWithoutSavedTracksInput;
  stringArtists: String;
  length: String;
  popularity: Int;
  album: AlbumCreateOneInput;
}

export interface PartyInvitationUpdateManyDataInput {
  invitedUserId?: Maybe<String>;
  partyId?: Maybe<String>;
}

export interface PartyCreateWithoutSavedTracksInput {
  id?: Maybe<ID_Input>;
  title: String;
  normalizedTitle: String;
  description: String;
  author: UserCreateOneInput;
  location: LocationCreateOneInput;
  games?: Maybe<GameCreateManyInput>;
  colorTint: String;
  isPublic?: Maybe<Boolean>;
  members?: Maybe<UserCreateManyWithoutPartiesInput>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret: String;
  playlist?: Maybe<PlaylistCreateManyWithoutPartiesInput>;
  cart: PartyCartCreateOneWithoutPartyInput;
}

export interface ChatUpdateManyWithoutMembersInput {
  create?: Maybe<
    ChatCreateWithoutMembersInput[] | ChatCreateWithoutMembersInput
  >;
  delete?: Maybe<ChatWhereUniqueInput[] | ChatWhereUniqueInput>;
  connect?: Maybe<ChatWhereUniqueInput[] | ChatWhereUniqueInput>;
  set?: Maybe<ChatWhereUniqueInput[] | ChatWhereUniqueInput>;
  disconnect?: Maybe<ChatWhereUniqueInput[] | ChatWhereUniqueInput>;
  update?: Maybe<
    | ChatUpdateWithWhereUniqueWithoutMembersInput[]
    | ChatUpdateWithWhereUniqueWithoutMembersInput
  >;
  upsert?: Maybe<
    | ChatUpsertWithWhereUniqueWithoutMembersInput[]
    | ChatUpsertWithWhereUniqueWithoutMembersInput
  >;
  deleteMany?: Maybe<ChatScalarWhereInput[] | ChatScalarWhereInput>;
}

export interface UserCreateWithoutPartiesInput {
  id?: Maybe<ID_Input>;
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationCreateManyWithoutUserInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationCreateManyWithoutUserInput>;
  chats?: Maybe<ChatCreateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemCreateManyWithoutUserInput>;
}

export interface ChatUpdateWithWhereUniqueWithoutMembersInput {
  where: ChatWhereUniqueInput;
  data: ChatUpdateWithoutMembersDataInput;
}

export interface UserCreateWithoutFriendsInput {
  id?: Maybe<ID_Input>;
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  parties?: Maybe<PartyCreateManyWithoutMembersInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationCreateManyWithoutUserInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationCreateManyWithoutUserInput>;
  chats?: Maybe<ChatCreateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemCreateManyWithoutUserInput>;
}

export interface ChatUpdateWithoutMembersDataInput {
  party?: Maybe<PartyUpdateOneRequiredInput>;
  messages?: Maybe<MessageUpdateManyWithoutChatInput>;
}

export interface FriendInvitationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  invitedBy: UserCreateOneInput;
  invitedUserId: String;
}

export interface MessageUpdateManyWithoutChatInput {
  create?: Maybe<
    MessageCreateWithoutChatInput[] | MessageCreateWithoutChatInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutChatInput[]
    | MessageUpdateWithWhereUniqueWithoutChatInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutChatInput[]
    | MessageUpsertWithWhereUniqueWithoutChatInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface PartyInvitationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  invitedBy: UserCreateOneInput;
  party: PartyCreateOneInput;
  invitedUserId: String;
  partyId: String;
}

export interface MessageUpdateWithWhereUniqueWithoutChatInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutChatDataInput;
}

export interface ChatCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  party: PartyCreateOneInput;
  messages?: Maybe<MessageCreateManyWithoutChatInput>;
}

export interface MessageUpdateWithoutChatDataInput {
  author?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  parties_every?: Maybe<PartyWhereInput>;
  parties_some?: Maybe<PartyWhereInput>;
  parties_none?: Maybe<PartyWhereInput>;
  friends_every?: Maybe<UserWhereInput>;
  friends_some?: Maybe<UserWhereInput>;
  friends_none?: Maybe<UserWhereInput>;
  pendingFriendInvitations_every?: Maybe<FriendInvitationWhereInput>;
  pendingFriendInvitations_some?: Maybe<FriendInvitationWhereInput>;
  pendingFriendInvitations_none?: Maybe<FriendInvitationWhereInput>;
  pendingPartyInvitations_every?: Maybe<PartyInvitationWhereInput>;
  pendingPartyInvitations_some?: Maybe<PartyInvitationWhereInput>;
  pendingPartyInvitations_none?: Maybe<PartyInvitationWhereInput>;
  chats_every?: Maybe<ChatWhereInput>;
  chats_some?: Maybe<ChatWhereInput>;
  chats_none?: Maybe<ChatWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  lastOnline?: Maybe<DateTimeInput>;
  lastOnline_not?: Maybe<DateTimeInput>;
  lastOnline_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastOnline_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastOnline_lt?: Maybe<DateTimeInput>;
  lastOnline_lte?: Maybe<DateTimeInput>;
  lastOnline_gt?: Maybe<DateTimeInput>;
  lastOnline_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  provider_not?: Maybe<SocialMediaType>;
  provider_in?: Maybe<SocialMediaType[] | SocialMediaType>;
  provider_not_in?: Maybe<SocialMediaType[] | SocialMediaType>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  thirdPartyId_not?: Maybe<String>;
  thirdPartyId_in?: Maybe<String[] | String>;
  thirdPartyId_not_in?: Maybe<String[] | String>;
  thirdPartyId_lt?: Maybe<String>;
  thirdPartyId_lte?: Maybe<String>;
  thirdPartyId_gt?: Maybe<String>;
  thirdPartyId_gte?: Maybe<String>;
  thirdPartyId_contains?: Maybe<String>;
  thirdPartyId_not_contains?: Maybe<String>;
  thirdPartyId_starts_with?: Maybe<String>;
  thirdPartyId_not_starts_with?: Maybe<String>;
  thirdPartyId_ends_with?: Maybe<String>;
  thirdPartyId_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  resetTokenExpiry_not?: Maybe<DateTimeInput>;
  resetTokenExpiry_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpiry_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpiry_lt?: Maybe<DateTimeInput>;
  resetTokenExpiry_lte?: Maybe<DateTimeInput>;
  resetTokenExpiry_gt?: Maybe<DateTimeInput>;
  resetTokenExpiry_gte?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  isPrivate_not?: Maybe<Boolean>;
  cartItems_every?: Maybe<PartyCartItemWhereInput>;
  cartItems_some?: Maybe<PartyCartItemWhereInput>;
  cartItems_none?: Maybe<PartyCartItemWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface MessageUpsertWithWhereUniqueWithoutChatInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutChatDataInput;
  create: MessageCreateWithoutChatInput;
}

export interface ChatWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  party?: Maybe<PartyWhereInput>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ChatWhereInput[] | ChatWhereInput>;
  OR?: Maybe<ChatWhereInput[] | ChatWhereInput>;
  NOT?: Maybe<ChatWhereInput[] | ChatWhereInput>;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface PartyCartWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  party?: Maybe<PartyWhereInput>;
  items_every?: Maybe<PartyCartItemWhereInput>;
  items_some?: Maybe<PartyCartItemWhereInput>;
  items_none?: Maybe<PartyCartItemWhereInput>;
  AND?: Maybe<PartyCartWhereInput[] | PartyCartWhereInput>;
  OR?: Maybe<PartyCartWhereInput[] | PartyCartWhereInput>;
  NOT?: Maybe<PartyCartWhereInput[] | PartyCartWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface GameWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  cover?: Maybe<String>;
  cover_not?: Maybe<String>;
  cover_in?: Maybe<String[] | String>;
  cover_not_in?: Maybe<String[] | String>;
  cover_lt?: Maybe<String>;
  cover_lte?: Maybe<String>;
  cover_gt?: Maybe<String>;
  cover_gte?: Maybe<String>;
  cover_contains?: Maybe<String>;
  cover_not_contains?: Maybe<String>;
  cover_starts_with?: Maybe<String>;
  cover_not_starts_with?: Maybe<String>;
  cover_ends_with?: Maybe<String>;
  cover_not_ends_with?: Maybe<String>;
  type?: Maybe<GameType>;
  type_not?: Maybe<GameType>;
  type_in?: Maybe<GameType[] | GameType>;
  type_not_in?: Maybe<GameType[] | GameType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GameWhereInput[] | GameWhereInput>;
  OR?: Maybe<GameWhereInput[] | GameWhereInput>;
  NOT?: Maybe<GameWhereInput[] | GameWhereInput>;
}

export interface MessageUpdateManyDataInput {
  content?: Maybe<String>;
}

export interface PartyInvitationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PartyInvitationWhereInput>;
  AND?: Maybe<
    | PartyInvitationSubscriptionWhereInput[]
    | PartyInvitationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | PartyInvitationSubscriptionWhereInput[]
    | PartyInvitationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PartyInvitationSubscriptionWhereInput[]
    | PartyInvitationSubscriptionWhereInput
  >;
}

export interface ChatUpsertWithWhereUniqueWithoutMembersInput {
  where: ChatWhereUniqueInput;
  update: ChatUpdateWithoutMembersDataInput;
  create: ChatCreateWithoutMembersInput;
}

export interface ArtistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  spotifyId?: Maybe<ID_Input>;
  spotifyId_not?: Maybe<ID_Input>;
  spotifyId_in?: Maybe<ID_Input[] | ID_Input>;
  spotifyId_not_in?: Maybe<ID_Input[] | ID_Input>;
  spotifyId_lt?: Maybe<ID_Input>;
  spotifyId_lte?: Maybe<ID_Input>;
  spotifyId_gt?: Maybe<ID_Input>;
  spotifyId_gte?: Maybe<ID_Input>;
  spotifyId_contains?: Maybe<ID_Input>;
  spotifyId_not_contains?: Maybe<ID_Input>;
  spotifyId_starts_with?: Maybe<ID_Input>;
  spotifyId_not_starts_with?: Maybe<ID_Input>;
  spotifyId_ends_with?: Maybe<ID_Input>;
  spotifyId_not_ends_with?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  uri_not?: Maybe<String>;
  uri_in?: Maybe<String[] | String>;
  uri_not_in?: Maybe<String[] | String>;
  uri_lt?: Maybe<String>;
  uri_lte?: Maybe<String>;
  uri_gt?: Maybe<String>;
  uri_gte?: Maybe<String>;
  uri_contains?: Maybe<String>;
  uri_not_contains?: Maybe<String>;
  uri_starts_with?: Maybe<String>;
  uri_not_starts_with?: Maybe<String>;
  uri_ends_with?: Maybe<String>;
  uri_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  OR?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  NOT?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
}

export interface ChatScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ChatScalarWhereInput[] | ChatScalarWhereInput>;
  OR?: Maybe<ChatScalarWhereInput[] | ChatScalarWhereInput>;
  NOT?: Maybe<ChatScalarWhereInput[] | ChatScalarWhereInput>;
}

export interface ImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ImageWhereInput>;
  AND?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
  OR?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
  NOT?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
}

export interface PartyCartItemUpdateManyWithoutUserInput {
  create?: Maybe<
    PartyCartItemCreateWithoutUserInput[] | PartyCartItemCreateWithoutUserInput
  >;
  delete?: Maybe<
    PartyCartItemWhereUniqueInput[] | PartyCartItemWhereUniqueInput
  >;
  connect?: Maybe<
    PartyCartItemWhereUniqueInput[] | PartyCartItemWhereUniqueInput
  >;
  set?: Maybe<PartyCartItemWhereUniqueInput[] | PartyCartItemWhereUniqueInput>;
  disconnect?: Maybe<
    PartyCartItemWhereUniqueInput[] | PartyCartItemWhereUniqueInput
  >;
  update?: Maybe<
    | PartyCartItemUpdateWithWhereUniqueWithoutUserInput[]
    | PartyCartItemUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PartyCartItemUpsertWithWhereUniqueWithoutUserInput[]
    | PartyCartItemUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    PartyCartItemScalarWhereInput[] | PartyCartItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | PartyCartItemUpdateManyWithWhereNestedInput[]
    | PartyCartItemUpdateManyWithWhereNestedInput
  >;
}

export interface ArtistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArtistWhereInput>;
  AND?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  OR?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  NOT?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
}

export interface PartyCartItemUpdateWithWhereUniqueWithoutUserInput {
  where: PartyCartItemWhereUniqueInput;
  data: PartyCartItemUpdateWithoutUserDataInput;
}

export interface TrackUpdateManyMutationInput {
  name?: Maybe<String>;
  duration?: Maybe<Int>;
  preview_url?: Maybe<String>;
}

export interface PartyCartItemUpdateWithoutUserDataInput {
  cart?: Maybe<PartyCartUpdateOneRequiredWithoutItemsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Float>;
  status?: Maybe<PartyCartItemStatus>;
  quantity?: Maybe<Int>;
}

export interface ArtistUpsertWithWhereUniqueNestedInput {
  where: ArtistWhereUniqueInput;
  update: ArtistUpdateDataInput;
  create: ArtistCreateInput;
}

export interface PartyCartUpdateOneRequiredWithoutItemsInput {
  create?: Maybe<PartyCartCreateWithoutItemsInput>;
  update?: Maybe<PartyCartUpdateWithoutItemsDataInput>;
  upsert?: Maybe<PartyCartUpsertWithoutItemsInput>;
  connect?: Maybe<PartyCartWhereUniqueInput>;
}

export interface ArtistUpdateManyInput {
  create?: Maybe<ArtistCreateInput[] | ArtistCreateInput>;
  update?: Maybe<
    | ArtistUpdateWithWhereUniqueNestedInput[]
    | ArtistUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ArtistUpsertWithWhereUniqueNestedInput[]
    | ArtistUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  set?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  disconnect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  deleteMany?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  updateMany?: Maybe<
    | ArtistUpdateManyWithWhereNestedInput[]
    | ArtistUpdateManyWithWhereNestedInput
  >;
}

export interface PartyCartUpdateWithoutItemsDataInput {
  party?: Maybe<PartyUpdateOneRequiredWithoutCartInput>;
}

export interface TrackCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  album: AlbumCreateOneInput;
  artists?: Maybe<ArtistCreateManyInput>;
  duration: Int;
  preview_url?: Maybe<String>;
}

export interface PartyUpdateOneRequiredWithoutCartInput {
  create?: Maybe<PartyCreateWithoutCartInput>;
  update?: Maybe<PartyUpdateWithoutCartDataInput>;
  upsert?: Maybe<PartyUpsertWithoutCartInput>;
  connect?: Maybe<PartyWhereUniqueInput>;
}

export interface ImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<ImageWhereInput[] | ImageWhereInput>;
  OR?: Maybe<ImageWhereInput[] | ImageWhereInput>;
  NOT?: Maybe<ImageWhereInput[] | ImageWhereInput>;
}

export interface PartyUpdateWithoutCartDataInput {
  title?: Maybe<String>;
  normalizedTitle?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
  location?: Maybe<LocationUpdateOneRequiredInput>;
  games?: Maybe<GameUpdateManyInput>;
  colorTint?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  members?: Maybe<UserUpdateManyWithoutPartiesInput>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret?: Maybe<String>;
  playlist?: Maybe<PlaylistUpdateManyWithoutPartiesInput>;
  savedTracks?: Maybe<PartySavedTrackUpdateManyWithoutPartyInput>;
}

export interface PlaylistUpdateInput {
  spotifyId?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  spotifyExternalUrl?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  parties?: Maybe<PartyUpdateManyWithoutPlaylistInput>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  tracks?: Maybe<PartySavedTrackUpdateManyInput>;
  importable?: Maybe<Boolean>;
}

export interface PartySavedTrackUpdateManyWithoutPartyInput {
  create?: Maybe<
    | PartySavedTrackCreateWithoutPartyInput[]
    | PartySavedTrackCreateWithoutPartyInput
  >;
  delete?: Maybe<
    PartySavedTrackWhereUniqueInput[] | PartySavedTrackWhereUniqueInput
  >;
  connect?: Maybe<
    PartySavedTrackWhereUniqueInput[] | PartySavedTrackWhereUniqueInput
  >;
  set?: Maybe<
    PartySavedTrackWhereUniqueInput[] | PartySavedTrackWhereUniqueInput
  >;
  disconnect?: Maybe<
    PartySavedTrackWhereUniqueInput[] | PartySavedTrackWhereUniqueInput
  >;
  update?: Maybe<
    | PartySavedTrackUpdateWithWhereUniqueWithoutPartyInput[]
    | PartySavedTrackUpdateWithWhereUniqueWithoutPartyInput
  >;
  upsert?: Maybe<
    | PartySavedTrackUpsertWithWhereUniqueWithoutPartyInput[]
    | PartySavedTrackUpsertWithWhereUniqueWithoutPartyInput
  >;
  deleteMany?: Maybe<
    PartySavedTrackScalarWhereInput[] | PartySavedTrackScalarWhereInput
  >;
  updateMany?: Maybe<
    | PartySavedTrackUpdateManyWithWhereNestedInput[]
    | PartySavedTrackUpdateManyWithWhereNestedInput
  >;
}

export interface PlaylistCreateInput {
  id?: Maybe<ID_Input>;
  spotifyId: ID_Input;
  uri: String;
  spotifyExternalUrl: String;
  user: UserCreateOneInput;
  parties?: Maybe<PartyCreateManyWithoutPlaylistInput>;
  name: String;
  imageUrl: String;
  tracks?: Maybe<PartySavedTrackCreateManyInput>;
  importable?: Maybe<Boolean>;
}

export interface PartySavedTrackUpdateWithWhereUniqueWithoutPartyInput {
  where: PartySavedTrackWhereUniqueInput;
  data: PartySavedTrackUpdateWithoutPartyDataInput;
}

export interface PartyInvitationUpdateManyMutationInput {
  invitedUserId?: Maybe<String>;
  partyId?: Maybe<String>;
}

export interface PartySavedTrackUpdateWithoutPartyDataInput {
  spotifyId?: Maybe<String>;
  durationMs?: Maybe<Int>;
  explicit?: Maybe<Boolean>;
  name?: Maybe<String>;
  previewUrl?: Maybe<String>;
  uri?: Maybe<String>;
  stringArtists?: Maybe<String>;
  length?: Maybe<String>;
  popularity?: Maybe<Int>;
  album?: Maybe<AlbumUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredWithoutPendingPartyInvitationsInput {
  create?: Maybe<UserCreateWithoutPendingPartyInvitationsInput>;
  update?: Maybe<UserUpdateWithoutPendingPartyInvitationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPendingPartyInvitationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface AlbumUpdateOneRequiredInput {
  create?: Maybe<AlbumCreateInput>;
  update?: Maybe<AlbumUpdateDataInput>;
  upsert?: Maybe<AlbumUpsertNestedInput>;
  connect?: Maybe<AlbumWhereUniqueInput>;
}

export interface UserCreateWithoutPendingPartyInvitationsInput {
  id?: Maybe<ID_Input>;
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  parties?: Maybe<PartyCreateManyWithoutMembersInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationCreateManyWithoutUserInput>;
  chats?: Maybe<ChatCreateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemCreateManyWithoutUserInput>;
}

export interface AlbumUpdateDataInput {
  spotifyId?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  name?: Maybe<String>;
  releaseDate?: Maybe<String>;
  imageUrl?: Maybe<String>;
}

export interface PartyCartItemUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Float>;
  status?: Maybe<PartyCartItemStatus>;
  quantity?: Maybe<Int>;
}

export interface AlbumUpsertNestedInput {
  update: AlbumUpdateDataInput;
  create: AlbumCreateInput;
}

export interface PartyCartUpdateInput {
  party?: Maybe<PartyUpdateOneRequiredWithoutCartInput>;
  items?: Maybe<PartyCartItemUpdateManyWithoutCartInput>;
}

export interface PartySavedTrackUpsertWithWhereUniqueWithoutPartyInput {
  where: PartySavedTrackWhereUniqueInput;
  update: PartySavedTrackUpdateWithoutPartyDataInput;
  create: PartySavedTrackCreateWithoutPartyInput;
}

export interface PartyUpdateInput {
  title?: Maybe<String>;
  normalizedTitle?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
  location?: Maybe<LocationUpdateOneRequiredInput>;
  games?: Maybe<GameUpdateManyInput>;
  colorTint?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  members?: Maybe<UserUpdateManyWithoutPartiesInput>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret?: Maybe<String>;
  playlist?: Maybe<PlaylistUpdateManyWithoutPartiesInput>;
  savedTracks?: Maybe<PartySavedTrackUpdateManyWithoutPartyInput>;
  cart?: Maybe<PartyCartUpdateOneRequiredWithoutPartyInput>;
}

export interface PartySavedTrackScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  spotifyId?: Maybe<String>;
  spotifyId_not?: Maybe<String>;
  spotifyId_in?: Maybe<String[] | String>;
  spotifyId_not_in?: Maybe<String[] | String>;
  spotifyId_lt?: Maybe<String>;
  spotifyId_lte?: Maybe<String>;
  spotifyId_gt?: Maybe<String>;
  spotifyId_gte?: Maybe<String>;
  spotifyId_contains?: Maybe<String>;
  spotifyId_not_contains?: Maybe<String>;
  spotifyId_starts_with?: Maybe<String>;
  spotifyId_not_starts_with?: Maybe<String>;
  spotifyId_ends_with?: Maybe<String>;
  spotifyId_not_ends_with?: Maybe<String>;
  durationMs?: Maybe<Int>;
  durationMs_not?: Maybe<Int>;
  durationMs_in?: Maybe<Int[] | Int>;
  durationMs_not_in?: Maybe<Int[] | Int>;
  durationMs_lt?: Maybe<Int>;
  durationMs_lte?: Maybe<Int>;
  durationMs_gt?: Maybe<Int>;
  durationMs_gte?: Maybe<Int>;
  explicit?: Maybe<Boolean>;
  explicit_not?: Maybe<Boolean>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  previewUrl?: Maybe<String>;
  previewUrl_not?: Maybe<String>;
  previewUrl_in?: Maybe<String[] | String>;
  previewUrl_not_in?: Maybe<String[] | String>;
  previewUrl_lt?: Maybe<String>;
  previewUrl_lte?: Maybe<String>;
  previewUrl_gt?: Maybe<String>;
  previewUrl_gte?: Maybe<String>;
  previewUrl_contains?: Maybe<String>;
  previewUrl_not_contains?: Maybe<String>;
  previewUrl_starts_with?: Maybe<String>;
  previewUrl_not_starts_with?: Maybe<String>;
  previewUrl_ends_with?: Maybe<String>;
  previewUrl_not_ends_with?: Maybe<String>;
  uri?: Maybe<String>;
  uri_not?: Maybe<String>;
  uri_in?: Maybe<String[] | String>;
  uri_not_in?: Maybe<String[] | String>;
  uri_lt?: Maybe<String>;
  uri_lte?: Maybe<String>;
  uri_gt?: Maybe<String>;
  uri_gte?: Maybe<String>;
  uri_contains?: Maybe<String>;
  uri_not_contains?: Maybe<String>;
  uri_starts_with?: Maybe<String>;
  uri_not_starts_with?: Maybe<String>;
  uri_ends_with?: Maybe<String>;
  uri_not_ends_with?: Maybe<String>;
  stringArtists?: Maybe<String>;
  stringArtists_not?: Maybe<String>;
  stringArtists_in?: Maybe<String[] | String>;
  stringArtists_not_in?: Maybe<String[] | String>;
  stringArtists_lt?: Maybe<String>;
  stringArtists_lte?: Maybe<String>;
  stringArtists_gt?: Maybe<String>;
  stringArtists_gte?: Maybe<String>;
  stringArtists_contains?: Maybe<String>;
  stringArtists_not_contains?: Maybe<String>;
  stringArtists_starts_with?: Maybe<String>;
  stringArtists_not_starts_with?: Maybe<String>;
  stringArtists_ends_with?: Maybe<String>;
  stringArtists_not_ends_with?: Maybe<String>;
  length?: Maybe<String>;
  length_not?: Maybe<String>;
  length_in?: Maybe<String[] | String>;
  length_not_in?: Maybe<String[] | String>;
  length_lt?: Maybe<String>;
  length_lte?: Maybe<String>;
  length_gt?: Maybe<String>;
  length_gte?: Maybe<String>;
  length_contains?: Maybe<String>;
  length_not_contains?: Maybe<String>;
  length_starts_with?: Maybe<String>;
  length_not_starts_with?: Maybe<String>;
  length_ends_with?: Maybe<String>;
  length_not_ends_with?: Maybe<String>;
  popularity?: Maybe<Int>;
  popularity_not?: Maybe<Int>;
  popularity_in?: Maybe<Int[] | Int>;
  popularity_not_in?: Maybe<Int[] | Int>;
  popularity_lt?: Maybe<Int>;
  popularity_lte?: Maybe<Int>;
  popularity_gt?: Maybe<Int>;
  popularity_gte?: Maybe<Int>;
  AND?: Maybe<
    PartySavedTrackScalarWhereInput[] | PartySavedTrackScalarWhereInput
  >;
  OR?: Maybe<
    PartySavedTrackScalarWhereInput[] | PartySavedTrackScalarWhereInput
  >;
  NOT?: Maybe<
    PartySavedTrackScalarWhereInput[] | PartySavedTrackScalarWhereInput
  >;
}

export interface ChatUpdateWithoutMessagesDataInput {
  party?: Maybe<PartyUpdateOneRequiredInput>;
  members?: Maybe<UserUpdateManyWithoutChatsInput>;
}

export interface PartySavedTrackUpdateManyWithWhereNestedInput {
  where: PartySavedTrackScalarWhereInput;
  data: PartySavedTrackUpdateManyDataInput;
}

export interface ChatCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  party: PartyCreateOneInput;
  members?: Maybe<UserCreateManyWithoutChatsInput>;
}

export interface PartySavedTrackUpdateManyDataInput {
  spotifyId?: Maybe<String>;
  durationMs?: Maybe<Int>;
  explicit?: Maybe<Boolean>;
  name?: Maybe<String>;
  previewUrl?: Maybe<String>;
  uri?: Maybe<String>;
  stringArtists?: Maybe<String>;
  length?: Maybe<String>;
  popularity?: Maybe<Int>;
}

export interface LocationUpdateManyMutationInput {
  placeName?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface PartyUpsertWithoutCartInput {
  update: PartyUpdateWithoutCartDataInput;
  create: PartyCreateWithoutCartInput;
}

export interface ImageUpdateInput {
  height?: Maybe<Int>;
  width?: Maybe<Int>;
  url?: Maybe<String>;
}

export interface PartyCartUpsertWithoutItemsInput {
  update: PartyCartUpdateWithoutItemsDataInput;
  create: PartyCartCreateWithoutItemsInput;
}

export interface AlbumUpdateInput {
  spotifyId?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  name?: Maybe<String>;
  releaseDate?: Maybe<String>;
  imageUrl?: Maybe<String>;
}

export interface PartyCartItemUpsertWithWhereUniqueWithoutUserInput {
  where: PartyCartItemWhereUniqueInput;
  update: PartyCartItemUpdateWithoutUserDataInput;
  create: PartyCartItemCreateWithoutUserInput;
}

export interface ArtistCreateInput {
  id?: Maybe<ID_Input>;
  spotifyId: ID_Input;
  uri: String;
  name: String;
}

export interface PartyCartItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  status?: Maybe<PartyCartItemStatus>;
  status_not?: Maybe<PartyCartItemStatus>;
  status_in?: Maybe<PartyCartItemStatus[] | PartyCartItemStatus>;
  status_not_in?: Maybe<PartyCartItemStatus[] | PartyCartItemStatus>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<PartyCartItemScalarWhereInput[] | PartyCartItemScalarWhereInput>;
  OR?: Maybe<PartyCartItemScalarWhereInput[] | PartyCartItemScalarWhereInput>;
  NOT?: Maybe<PartyCartItemScalarWhereInput[] | PartyCartItemScalarWhereInput>;
}

export interface PartyCreateOneInput {
  create?: Maybe<PartyCreateInput>;
  connect?: Maybe<PartyWhereUniqueInput>;
}

export interface PartyCartItemUpdateManyWithWhereNestedInput {
  where: PartyCartItemScalarWhereInput;
  data: PartyCartItemUpdateManyDataInput;
}

export interface PartyCreateManyWithoutMembersInput {
  create?: Maybe<
    PartyCreateWithoutMembersInput[] | PartyCreateWithoutMembersInput
  >;
  connect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
}

export interface PartyCartItemUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Float>;
  status?: Maybe<PartyCartItemStatus>;
  quantity?: Maybe<Int>;
}

export interface GameCreateManyInput {
  create?: Maybe<GameCreateInput[] | GameCreateInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFriendsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFriendsDataInput;
  create: UserCreateWithoutFriendsInput;
}

export interface PartySavedTrackCreateManyInput {
  create?: Maybe<PartySavedTrackCreateInput[] | PartySavedTrackCreateInput>;
  connect?: Maybe<
    PartySavedTrackWhereUniqueInput[] | PartySavedTrackWhereUniqueInput
  >;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  lastOnline?: Maybe<DateTimeInput>;
  lastOnline_not?: Maybe<DateTimeInput>;
  lastOnline_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastOnline_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastOnline_lt?: Maybe<DateTimeInput>;
  lastOnline_lte?: Maybe<DateTimeInput>;
  lastOnline_gt?: Maybe<DateTimeInput>;
  lastOnline_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  provider_not?: Maybe<SocialMediaType>;
  provider_in?: Maybe<SocialMediaType[] | SocialMediaType>;
  provider_not_in?: Maybe<SocialMediaType[] | SocialMediaType>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  thirdPartyId_not?: Maybe<String>;
  thirdPartyId_in?: Maybe<String[] | String>;
  thirdPartyId_not_in?: Maybe<String[] | String>;
  thirdPartyId_lt?: Maybe<String>;
  thirdPartyId_lte?: Maybe<String>;
  thirdPartyId_gt?: Maybe<String>;
  thirdPartyId_gte?: Maybe<String>;
  thirdPartyId_contains?: Maybe<String>;
  thirdPartyId_not_contains?: Maybe<String>;
  thirdPartyId_starts_with?: Maybe<String>;
  thirdPartyId_not_starts_with?: Maybe<String>;
  thirdPartyId_ends_with?: Maybe<String>;
  thirdPartyId_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  resetTokenExpiry_not?: Maybe<DateTimeInput>;
  resetTokenExpiry_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpiry_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpiry_lt?: Maybe<DateTimeInput>;
  resetTokenExpiry_lte?: Maybe<DateTimeInput>;
  resetTokenExpiry_gt?: Maybe<DateTimeInput>;
  resetTokenExpiry_gte?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  isPrivate_not?: Maybe<Boolean>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserCreateManyWithoutPartiesInput {
  create?: Maybe<
    UserCreateWithoutPartiesInput[] | UserCreateWithoutPartiesInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface FriendInvitationCreateManyWithoutUserInput {
  create?: Maybe<
    | FriendInvitationCreateWithoutUserInput[]
    | FriendInvitationCreateWithoutUserInput
  >;
  connect?: Maybe<
    FriendInvitationWhereUniqueInput[] | FriendInvitationWhereUniqueInput
  >;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
}

export interface ChatCreateManyWithoutMembersInput {
  create?: Maybe<
    ChatCreateWithoutMembersInput[] | ChatCreateWithoutMembersInput
  >;
  connect?: Maybe<ChatWhereUniqueInput[] | ChatWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutPartiesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutPartiesDataInput;
  create: UserCreateWithoutPartiesInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface PartyCartUpdateOneRequiredWithoutPartyInput {
  create?: Maybe<PartyCartCreateWithoutPartyInput>;
  update?: Maybe<PartyCartUpdateWithoutPartyDataInput>;
  upsert?: Maybe<PartyCartUpsertWithoutPartyInput>;
  connect?: Maybe<PartyCartWhereUniqueInput>;
}

export interface PartySavedTrackSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PartySavedTrackWhereInput>;
  AND?: Maybe<
    | PartySavedTrackSubscriptionWhereInput[]
    | PartySavedTrackSubscriptionWhereInput
  >;
  OR?: Maybe<
    | PartySavedTrackSubscriptionWhereInput[]
    | PartySavedTrackSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PartySavedTrackSubscriptionWhereInput[]
    | PartySavedTrackSubscriptionWhereInput
  >;
}

export interface PartyCartUpdateWithoutPartyDataInput {
  items?: Maybe<PartyCartItemUpdateManyWithoutCartInput>;
}

export interface PartyCartSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PartyCartWhereInput>;
  AND?: Maybe<
    PartyCartSubscriptionWhereInput[] | PartyCartSubscriptionWhereInput
  >;
  OR?: Maybe<
    PartyCartSubscriptionWhereInput[] | PartyCartSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PartyCartSubscriptionWhereInput[] | PartyCartSubscriptionWhereInput
  >;
}

export interface PartyCartItemUpdateManyWithoutCartInput {
  create?: Maybe<
    PartyCartItemCreateWithoutCartInput[] | PartyCartItemCreateWithoutCartInput
  >;
  delete?: Maybe<
    PartyCartItemWhereUniqueInput[] | PartyCartItemWhereUniqueInput
  >;
  connect?: Maybe<
    PartyCartItemWhereUniqueInput[] | PartyCartItemWhereUniqueInput
  >;
  set?: Maybe<PartyCartItemWhereUniqueInput[] | PartyCartItemWhereUniqueInput>;
  disconnect?: Maybe<
    PartyCartItemWhereUniqueInput[] | PartyCartItemWhereUniqueInput
  >;
  update?: Maybe<
    | PartyCartItemUpdateWithWhereUniqueWithoutCartInput[]
    | PartyCartItemUpdateWithWhereUniqueWithoutCartInput
  >;
  upsert?: Maybe<
    | PartyCartItemUpsertWithWhereUniqueWithoutCartInput[]
    | PartyCartItemUpsertWithWhereUniqueWithoutCartInput
  >;
  deleteMany?: Maybe<
    PartyCartItemScalarWhereInput[] | PartyCartItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | PartyCartItemUpdateManyWithWhereNestedInput[]
    | PartyCartItemUpdateManyWithWhereNestedInput
  >;
}

export interface FriendInvitationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FriendInvitationWhereInput>;
  AND?: Maybe<
    | FriendInvitationSubscriptionWhereInput[]
    | FriendInvitationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | FriendInvitationSubscriptionWhereInput[]
    | FriendInvitationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | FriendInvitationSubscriptionWhereInput[]
    | FriendInvitationSubscriptionWhereInput
  >;
}

export interface PartyCartItemUpdateWithWhereUniqueWithoutCartInput {
  where: PartyCartItemWhereUniqueInput;
  data: PartyCartItemUpdateWithoutCartDataInput;
}

export interface ArtistUpdateManyWithWhereNestedInput {
  where: ArtistScalarWhereInput;
  data: ArtistUpdateManyDataInput;
}

export interface PartyCartItemUpdateWithoutCartDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCartItemsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Float>;
  status?: Maybe<PartyCartItemStatus>;
  quantity?: Maybe<Int>;
}

export type GameWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  title?: Maybe<String>;
}>;

export interface UserUpdateOneRequiredWithoutCartItemsInput {
  create?: Maybe<UserCreateWithoutCartItemsInput>;
  update?: Maybe<UserUpdateWithoutCartItemsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCartItemsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PartyUpdateWithWhereUniqueWithoutPlaylistInput {
  where: PartyWhereUniqueInput;
  data: PartyUpdateWithoutPlaylistDataInput;
}

export interface UserUpdateWithoutCartItemsDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  parties?: Maybe<PartyUpdateManyWithoutMembersInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationUpdateManyWithoutUserInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationUpdateManyWithoutUserInput>;
  chats?: Maybe<ChatUpdateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpsertWithoutCartItemsInput {
  update: UserUpdateWithoutCartItemsDataInput;
  create: UserCreateWithoutCartItemsInput;
}

export type PartyCartWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PartyCartItemUpsertWithWhereUniqueWithoutCartInput {
  where: PartyCartItemWhereUniqueInput;
  update: PartyCartItemUpdateWithoutCartDataInput;
  create: PartyCartItemCreateWithoutCartInput;
}

export interface PartyCartItemCreateInput {
  id?: Maybe<ID_Input>;
  cart: PartyCartCreateOneWithoutItemsInput;
  user: UserCreateOneWithoutCartItemsInput;
  name: String;
  description: String;
  price: Float;
  status: PartyCartItemStatus;
  quantity?: Maybe<Int>;
}

export interface PartyCartUpsertWithoutPartyInput {
  update: PartyCartUpdateWithoutPartyDataInput;
  create: PartyCartCreateWithoutPartyInput;
}

export interface ChatUpsertWithoutMessagesInput {
  update: ChatUpdateWithoutMessagesDataInput;
  create: ChatCreateWithoutMessagesInput;
}

export interface PartyUpsertWithoutSavedTracksInput {
  update: PartyUpdateWithoutSavedTracksDataInput;
  create: PartyCreateWithoutSavedTracksInput;
}

export interface ChatCreateOneWithoutMessagesInput {
  create?: Maybe<ChatCreateWithoutMessagesInput>;
  connect?: Maybe<ChatWhereUniqueInput>;
}

export interface PartySavedTrackUpsertWithWhereUniqueNestedInput {
  where: PartySavedTrackWhereUniqueInput;
  update: PartySavedTrackUpdateDataInput;
  create: PartySavedTrackCreateInput;
}

export interface ArtistUpdateManyMutationInput {
  spotifyId?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  name?: Maybe<String>;
}

export interface PlaylistUpsertWithWhereUniqueWithoutPartiesInput {
  where: PlaylistWhereUniqueInput;
  update: PlaylistUpdateWithoutPartiesDataInput;
  create: PlaylistCreateWithoutPartiesInput;
}

export interface LocationCreateOneInput {
  create?: Maybe<LocationCreateInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface PlaylistScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  spotifyId?: Maybe<ID_Input>;
  spotifyId_not?: Maybe<ID_Input>;
  spotifyId_in?: Maybe<ID_Input[] | ID_Input>;
  spotifyId_not_in?: Maybe<ID_Input[] | ID_Input>;
  spotifyId_lt?: Maybe<ID_Input>;
  spotifyId_lte?: Maybe<ID_Input>;
  spotifyId_gt?: Maybe<ID_Input>;
  spotifyId_gte?: Maybe<ID_Input>;
  spotifyId_contains?: Maybe<ID_Input>;
  spotifyId_not_contains?: Maybe<ID_Input>;
  spotifyId_starts_with?: Maybe<ID_Input>;
  spotifyId_not_starts_with?: Maybe<ID_Input>;
  spotifyId_ends_with?: Maybe<ID_Input>;
  spotifyId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  uri?: Maybe<String>;
  uri_not?: Maybe<String>;
  uri_in?: Maybe<String[] | String>;
  uri_not_in?: Maybe<String[] | String>;
  uri_lt?: Maybe<String>;
  uri_lte?: Maybe<String>;
  uri_gt?: Maybe<String>;
  uri_gte?: Maybe<String>;
  uri_contains?: Maybe<String>;
  uri_not_contains?: Maybe<String>;
  uri_starts_with?: Maybe<String>;
  uri_not_starts_with?: Maybe<String>;
  uri_ends_with?: Maybe<String>;
  uri_not_ends_with?: Maybe<String>;
  spotifyExternalUrl?: Maybe<String>;
  spotifyExternalUrl_not?: Maybe<String>;
  spotifyExternalUrl_in?: Maybe<String[] | String>;
  spotifyExternalUrl_not_in?: Maybe<String[] | String>;
  spotifyExternalUrl_lt?: Maybe<String>;
  spotifyExternalUrl_lte?: Maybe<String>;
  spotifyExternalUrl_gt?: Maybe<String>;
  spotifyExternalUrl_gte?: Maybe<String>;
  spotifyExternalUrl_contains?: Maybe<String>;
  spotifyExternalUrl_not_contains?: Maybe<String>;
  spotifyExternalUrl_starts_with?: Maybe<String>;
  spotifyExternalUrl_not_starts_with?: Maybe<String>;
  spotifyExternalUrl_ends_with?: Maybe<String>;
  spotifyExternalUrl_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  importable?: Maybe<Boolean>;
  importable_not?: Maybe<Boolean>;
  AND?: Maybe<PlaylistScalarWhereInput[] | PlaylistScalarWhereInput>;
  OR?: Maybe<PlaylistScalarWhereInput[] | PlaylistScalarWhereInput>;
  NOT?: Maybe<PlaylistScalarWhereInput[] | PlaylistScalarWhereInput>;
}

export interface PartyCreateOneWithoutSavedTracksInput {
  create?: Maybe<PartyCreateWithoutSavedTracksInput>;
  connect?: Maybe<PartyWhereUniqueInput>;
}

export interface PlaylistUpdateManyWithWhereNestedInput {
  where: PlaylistScalarWhereInput;
  data: PlaylistUpdateManyDataInput;
}

export interface PartyInvitationCreateManyWithoutUserInput {
  create?: Maybe<
    | PartyInvitationCreateWithoutUserInput[]
    | PartyInvitationCreateWithoutUserInput
  >;
  connect?: Maybe<
    PartyInvitationWhereUniqueInput[] | PartyInvitationWhereUniqueInput
  >;
}

export interface PlaylistUpdateManyDataInput {
  spotifyId?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  spotifyExternalUrl?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  importable?: Maybe<Boolean>;
}

export interface TrackSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TrackWhereInput>;
  AND?: Maybe<TrackSubscriptionWhereInput[] | TrackSubscriptionWhereInput>;
  OR?: Maybe<TrackSubscriptionWhereInput[] | TrackSubscriptionWhereInput>;
  NOT?: Maybe<TrackSubscriptionWhereInput[] | TrackSubscriptionWhereInput>;
}

export interface PartyUpsertWithWhereUniqueWithoutMembersInput {
  where: PartyWhereUniqueInput;
  update: PartyUpdateWithoutMembersDataInput;
  create: PartyCreateWithoutMembersInput;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface PartyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  normalizedTitle?: Maybe<String>;
  normalizedTitle_not?: Maybe<String>;
  normalizedTitle_in?: Maybe<String[] | String>;
  normalizedTitle_not_in?: Maybe<String[] | String>;
  normalizedTitle_lt?: Maybe<String>;
  normalizedTitle_lte?: Maybe<String>;
  normalizedTitle_gt?: Maybe<String>;
  normalizedTitle_gte?: Maybe<String>;
  normalizedTitle_contains?: Maybe<String>;
  normalizedTitle_not_contains?: Maybe<String>;
  normalizedTitle_starts_with?: Maybe<String>;
  normalizedTitle_not_starts_with?: Maybe<String>;
  normalizedTitle_ends_with?: Maybe<String>;
  normalizedTitle_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  colorTint?: Maybe<String>;
  colorTint_not?: Maybe<String>;
  colorTint_in?: Maybe<String[] | String>;
  colorTint_not_in?: Maybe<String[] | String>;
  colorTint_lt?: Maybe<String>;
  colorTint_lte?: Maybe<String>;
  colorTint_gt?: Maybe<String>;
  colorTint_gte?: Maybe<String>;
  colorTint_contains?: Maybe<String>;
  colorTint_not_contains?: Maybe<String>;
  colorTint_starts_with?: Maybe<String>;
  colorTint_not_starts_with?: Maybe<String>;
  colorTint_ends_with?: Maybe<String>;
  colorTint_not_ends_with?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  isPublic_not?: Maybe<Boolean>;
  start?: Maybe<DateTimeInput>;
  start_not?: Maybe<DateTimeInput>;
  start_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_lt?: Maybe<DateTimeInput>;
  start_lte?: Maybe<DateTimeInput>;
  start_gt?: Maybe<DateTimeInput>;
  start_gte?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  end_not?: Maybe<DateTimeInput>;
  end_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_lt?: Maybe<DateTimeInput>;
  end_lte?: Maybe<DateTimeInput>;
  end_gt?: Maybe<DateTimeInput>;
  end_gte?: Maybe<DateTimeInput>;
  inviteSecret?: Maybe<String>;
  inviteSecret_not?: Maybe<String>;
  inviteSecret_in?: Maybe<String[] | String>;
  inviteSecret_not_in?: Maybe<String[] | String>;
  inviteSecret_lt?: Maybe<String>;
  inviteSecret_lte?: Maybe<String>;
  inviteSecret_gt?: Maybe<String>;
  inviteSecret_gte?: Maybe<String>;
  inviteSecret_contains?: Maybe<String>;
  inviteSecret_not_contains?: Maybe<String>;
  inviteSecret_starts_with?: Maybe<String>;
  inviteSecret_not_starts_with?: Maybe<String>;
  inviteSecret_ends_with?: Maybe<String>;
  inviteSecret_not_ends_with?: Maybe<String>;
  AND?: Maybe<PartyScalarWhereInput[] | PartyScalarWhereInput>;
  OR?: Maybe<PartyScalarWhereInput[] | PartyScalarWhereInput>;
  NOT?: Maybe<PartyScalarWhereInput[] | PartyScalarWhereInput>;
}

export type FriendInvitationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PartyUpdateManyWithWhereNestedInput {
  where: PartyScalarWhereInput;
  data: PartyUpdateManyDataInput;
}

export interface PartyCreateWithoutPlaylistInput {
  id?: Maybe<ID_Input>;
  title: String;
  normalizedTitle: String;
  description: String;
  author: UserCreateOneInput;
  location: LocationCreateOneInput;
  games?: Maybe<GameCreateManyInput>;
  colorTint: String;
  isPublic?: Maybe<Boolean>;
  members?: Maybe<UserCreateManyWithoutPartiesInput>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret: String;
  savedTracks?: Maybe<PartySavedTrackCreateManyWithoutPartyInput>;
  cart: PartyCartCreateOneWithoutPartyInput;
}

export interface PartyUpdateManyDataInput {
  title?: Maybe<String>;
  normalizedTitle?: Maybe<String>;
  description?: Maybe<String>;
  colorTint?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret?: Maybe<String>;
}

export interface PartyInvitationCreateInput {
  id?: Maybe<ID_Input>;
  invitedBy: UserCreateOneInput;
  user: UserCreateOneWithoutPendingPartyInvitationsInput;
  party: PartyCreateOneInput;
  invitedUserId: String;
  partyId: String;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MessageUpdateInput {
  author?: Maybe<UserUpdateOneRequiredInput>;
  chat?: Maybe<ChatUpdateOneRequiredWithoutMessagesInput>;
  content?: Maybe<String>;
}

export interface PartyUpsertNestedInput {
  update: PartyUpdateDataInput;
  create: PartyCreateInput;
}

export interface GameUpdateManyMutationInput {
  title?: Maybe<String>;
  cover?: Maybe<String>;
  type?: Maybe<GameType>;
}

export interface UserUpdateManyWithoutChatsInput {
  create?: Maybe<UserCreateWithoutChatsInput[] | UserCreateWithoutChatsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutChatsInput[]
    | UserUpdateWithWhereUniqueWithoutChatsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutChatsInput[]
    | UserUpsertWithWhereUniqueWithoutChatsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface PlaylistCreateManyWithoutPartiesInput {
  create?: Maybe<
    PlaylistCreateWithoutPartiesInput[] | PlaylistCreateWithoutPartiesInput
  >;
  connect?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
}

export interface UserUpdateWithWhereUniqueWithoutChatsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutChatsDataInput;
}

export interface MessageCreateManyWithoutChatInput {
  create?: Maybe<
    MessageCreateWithoutChatInput[] | MessageCreateWithoutChatInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface UserUpdateWithoutChatsDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  parties?: Maybe<PartyUpdateManyWithoutMembersInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  pendingFriendInvitations?: Maybe<FriendInvitationUpdateManyWithoutUserInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationUpdateManyWithoutUserInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
}

export interface UserUpsertWithWhereUniqueWithoutChatsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutChatsDataInput;
  create: UserCreateWithoutChatsInput;
}

export type PartyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  inviteSecret?: Maybe<String>;
}>;

export interface FriendInvitationCreateInput {
  id?: Maybe<ID_Input>;
  invitedBy: UserCreateOneInput;
  user: UserCreateOneWithoutPendingFriendInvitationsInput;
  invitedUserId: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserCreateOneWithoutPendingFriendInvitationsInput {
  create?: Maybe<UserCreateWithoutPendingFriendInvitationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateManyWithoutFriendsInput {
  create?: Maybe<
    UserCreateWithoutFriendsInput[] | UserCreateWithoutFriendsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPendingFriendInvitationsDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  parties?: Maybe<PartyUpdateManyWithoutMembersInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationUpdateManyWithoutUserInput>;
  chats?: Maybe<ChatUpdateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemUpdateManyWithoutUserInput>;
}

export interface UserUpdateOneRequiredWithoutPendingFriendInvitationsInput {
  create?: Maybe<UserCreateWithoutPendingFriendInvitationsInput>;
  update?: Maybe<UserUpdateWithoutPendingFriendInvitationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPendingFriendInvitationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FriendInvitationUpdateInput {
  invitedBy?: Maybe<UserUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutPendingFriendInvitationsInput>;
  invitedUserId?: Maybe<String>;
}

export interface UserCreateWithoutPendingFriendInvitationsInput {
  id?: Maybe<ID_Input>;
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  parties?: Maybe<PartyCreateManyWithoutMembersInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  pendingPartyInvitations?: Maybe<PartyInvitationCreateManyWithoutUserInput>;
  chats?: Maybe<ChatCreateManyWithoutMembersInput>;
  lastOnline?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  provider?: Maybe<SocialMediaType>;
  avatar?: Maybe<String>;
  thirdPartyId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  isPrivate?: Maybe<Boolean>;
  cartItems?: Maybe<PartyCartItemCreateManyWithoutUserInput>;
}

export interface PlaylistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  spotifyId?: Maybe<ID_Input>;
  spotifyId_not?: Maybe<ID_Input>;
  spotifyId_in?: Maybe<ID_Input[] | ID_Input>;
  spotifyId_not_in?: Maybe<ID_Input[] | ID_Input>;
  spotifyId_lt?: Maybe<ID_Input>;
  spotifyId_lte?: Maybe<ID_Input>;
  spotifyId_gt?: Maybe<ID_Input>;
  spotifyId_gte?: Maybe<ID_Input>;
  spotifyId_contains?: Maybe<ID_Input>;
  spotifyId_not_contains?: Maybe<ID_Input>;
  spotifyId_starts_with?: Maybe<ID_Input>;
  spotifyId_not_starts_with?: Maybe<ID_Input>;
  spotifyId_ends_with?: Maybe<ID_Input>;
  spotifyId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  uri?: Maybe<String>;
  uri_not?: Maybe<String>;
  uri_in?: Maybe<String[] | String>;
  uri_not_in?: Maybe<String[] | String>;
  uri_lt?: Maybe<String>;
  uri_lte?: Maybe<String>;
  uri_gt?: Maybe<String>;
  uri_gte?: Maybe<String>;
  uri_contains?: Maybe<String>;
  uri_not_contains?: Maybe<String>;
  uri_starts_with?: Maybe<String>;
  uri_not_starts_with?: Maybe<String>;
  uri_ends_with?: Maybe<String>;
  uri_not_ends_with?: Maybe<String>;
  spotifyExternalUrl?: Maybe<String>;
  spotifyExternalUrl_not?: Maybe<String>;
  spotifyExternalUrl_in?: Maybe<String[] | String>;
  spotifyExternalUrl_not_in?: Maybe<String[] | String>;
  spotifyExternalUrl_lt?: Maybe<String>;
  spotifyExternalUrl_lte?: Maybe<String>;
  spotifyExternalUrl_gt?: Maybe<String>;
  spotifyExternalUrl_gte?: Maybe<String>;
  spotifyExternalUrl_contains?: Maybe<String>;
  spotifyExternalUrl_not_contains?: Maybe<String>;
  spotifyExternalUrl_starts_with?: Maybe<String>;
  spotifyExternalUrl_not_starts_with?: Maybe<String>;
  spotifyExternalUrl_ends_with?: Maybe<String>;
  spotifyExternalUrl_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  parties_every?: Maybe<PartyWhereInput>;
  parties_some?: Maybe<PartyWhereInput>;
  parties_none?: Maybe<PartyWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  tracks_every?: Maybe<PartySavedTrackWhereInput>;
  tracks_some?: Maybe<PartySavedTrackWhereInput>;
  tracks_none?: Maybe<PartySavedTrackWhereInput>;
  importable?: Maybe<Boolean>;
  importable_not?: Maybe<Boolean>;
  AND?: Maybe<PlaylistWhereInput[] | PlaylistWhereInput>;
  OR?: Maybe<PlaylistWhereInput[] | PlaylistWhereInput>;
  NOT?: Maybe<PlaylistWhereInput[] | PlaylistWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PartyUpdateManyMutationInput {
  title?: Maybe<String>;
  normalizedTitle?: Maybe<String>;
  description?: Maybe<String>;
  colorTint?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  inviteSecret?: Maybe<String>;
}

export type ImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  lastOnline?: DateTimeOutput;
  deleted: Boolean;
  provider?: SocialMediaType;
  avatar?: String;
  thirdPartyId?: String;
  resetToken?: String;
  resetTokenExpiry?: DateTimeOutput;
  isPrivate: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  lastOnline: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
  provider: () => Promise<SocialMediaType>;
  avatar: () => Promise<String>;
  thirdPartyId: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<DateTimeOutput>;
  isPrivate: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastOnline: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  provider: () => Promise<AsyncIterator<SocialMediaType>>;
  avatar: () => Promise<AsyncIterator<String>>;
  thirdPartyId: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
}

export interface PartySavedTrack {
  id: ID_Output;
  spotifyId: String;
  durationMs: Int;
  explicit: Boolean;
  name: String;
  previewUrl?: String;
  uri: String;
  stringArtists: String;
  length: String;
  popularity: Int;
}

export interface PartySavedTrackPromise
  extends Promise<PartySavedTrack>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<String>;
  durationMs: () => Promise<Int>;
  explicit: () => Promise<Boolean>;
  name: () => Promise<String>;
  previewUrl: () => Promise<String>;
  uri: () => Promise<String>;
  party: <T = PartyPromise>() => T;
  stringArtists: () => Promise<String>;
  length: () => Promise<String>;
  popularity: () => Promise<Int>;
  album: <T = AlbumPromise>() => T;
}

export interface PartySavedTrackSubscription
  extends Promise<AsyncIterator<PartySavedTrack>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spotifyId: () => Promise<AsyncIterator<String>>;
  durationMs: () => Promise<AsyncIterator<Int>>;
  explicit: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  previewUrl: () => Promise<AsyncIterator<String>>;
  uri: () => Promise<AsyncIterator<String>>;
  party: <T = PartySubscription>() => T;
  stringArtists: () => Promise<AsyncIterator<String>>;
  length: () => Promise<AsyncIterator<String>>;
  popularity: () => Promise<AsyncIterator<Int>>;
  album: <T = AlbumSubscription>() => T;
}

export interface PartySavedTrackNullablePromise
  extends Promise<PartySavedTrack | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<String>;
  durationMs: () => Promise<Int>;
  explicit: () => Promise<Boolean>;
  name: () => Promise<String>;
  previewUrl: () => Promise<String>;
  uri: () => Promise<String>;
  party: <T = PartyPromise>() => T;
  stringArtists: () => Promise<String>;
  length: () => Promise<String>;
  popularity: () => Promise<Int>;
  album: <T = AlbumPromise>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  lastOnline?: DateTimeOutput;
  deleted: Boolean;
  provider?: SocialMediaType;
  avatar?: String;
  thirdPartyId?: String;
  resetToken?: String;
  resetTokenExpiry?: DateTimeOutput;
  isPrivate: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  parties: <T = FragmentableArray<Party>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friends: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pendingFriendInvitations: <T = FragmentableArray<FriendInvitation>>(args?: {
    where?: FriendInvitationWhereInput;
    orderBy?: FriendInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pendingPartyInvitations: <T = FragmentableArray<PartyInvitation>>(args?: {
    where?: PartyInvitationWhereInput;
    orderBy?: PartyInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chats: <T = FragmentableArray<Chat>>(args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  lastOnline: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
  provider: () => Promise<SocialMediaType>;
  avatar: () => Promise<String>;
  thirdPartyId: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<DateTimeOutput>;
  isPrivate: () => Promise<Boolean>;
  cartItems: <T = FragmentableArray<PartyCartItem>>(args?: {
    where?: PartyCartItemWhereInput;
    orderBy?: PartyCartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  parties: <T = Promise<AsyncIterator<PartySubscription>>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friends: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pendingFriendInvitations: <
    T = Promise<AsyncIterator<FriendInvitationSubscription>>
  >(args?: {
    where?: FriendInvitationWhereInput;
    orderBy?: FriendInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pendingPartyInvitations: <
    T = Promise<AsyncIterator<PartyInvitationSubscription>>
  >(args?: {
    where?: PartyInvitationWhereInput;
    orderBy?: PartyInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chats: <T = Promise<AsyncIterator<ChatSubscription>>>(args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastOnline: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  provider: () => Promise<AsyncIterator<SocialMediaType>>;
  avatar: () => Promise<AsyncIterator<String>>;
  thirdPartyId: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
  cartItems: <T = Promise<AsyncIterator<PartyCartItemSubscription>>>(args?: {
    where?: PartyCartItemWhereInput;
    orderBy?: PartyCartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  parties: <T = FragmentableArray<Party>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friends: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pendingFriendInvitations: <T = FragmentableArray<FriendInvitation>>(args?: {
    where?: FriendInvitationWhereInput;
    orderBy?: FriendInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pendingPartyInvitations: <T = FragmentableArray<PartyInvitation>>(args?: {
    where?: PartyInvitationWhereInput;
    orderBy?: PartyInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chats: <T = FragmentableArray<Chat>>(args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  lastOnline: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
  provider: () => Promise<SocialMediaType>;
  avatar: () => Promise<String>;
  thirdPartyId: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<DateTimeOutput>;
  isPrivate: () => Promise<Boolean>;
  cartItems: <T = FragmentableArray<PartyCartItem>>(args?: {
    where?: PartyCartItemWhereInput;
    orderBy?: PartyCartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Message {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  chat: <T = ChatPromise>() => T;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  chat: <T = ChatSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  chat: <T = ChatPromise>() => T;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PlaylistPreviousValues {
  id: ID_Output;
  spotifyId: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  uri: String;
  spotifyExternalUrl: String;
  name: String;
  imageUrl: String;
  importable: Boolean;
}

export interface PlaylistPreviousValuesPromise
  extends Promise<PlaylistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  uri: () => Promise<String>;
  spotifyExternalUrl: () => Promise<String>;
  name: () => Promise<String>;
  imageUrl: () => Promise<String>;
  importable: () => Promise<Boolean>;
}

export interface PlaylistPreviousValuesSubscription
  extends Promise<AsyncIterator<PlaylistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spotifyId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  uri: () => Promise<AsyncIterator<String>>;
  spotifyExternalUrl: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  importable: () => Promise<AsyncIterator<Boolean>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TrackSubscriptionPayload {
  mutation: MutationType;
  node: Track;
  updatedFields: String[];
  previousValues: TrackPreviousValues;
}

export interface TrackSubscriptionPayloadPromise
  extends Promise<TrackSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TrackPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TrackPreviousValuesPromise>() => T;
}

export interface TrackSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TrackSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TrackSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TrackPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TrackEdge {
  node: Track;
  cursor: String;
}

export interface TrackEdgePromise extends Promise<TrackEdge>, Fragmentable {
  node: <T = TrackPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TrackEdgeSubscription
  extends Promise<AsyncIterator<TrackEdge>>,
    Fragmentable {
  node: <T = TrackSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Playlist {
  id: ID_Output;
  spotifyId: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  uri: String;
  spotifyExternalUrl: String;
  name: String;
  imageUrl: String;
  importable: Boolean;
}

export interface PlaylistPromise extends Promise<Playlist>, Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  uri: () => Promise<String>;
  spotifyExternalUrl: () => Promise<String>;
  user: <T = UserPromise>() => T;
  parties: <T = FragmentableArray<Party>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  imageUrl: () => Promise<String>;
  tracks: <T = FragmentableArray<PartySavedTrack>>(args?: {
    where?: PartySavedTrackWhereInput;
    orderBy?: PartySavedTrackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  importable: () => Promise<Boolean>;
}

export interface PlaylistSubscription
  extends Promise<AsyncIterator<Playlist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spotifyId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  uri: () => Promise<AsyncIterator<String>>;
  spotifyExternalUrl: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  parties: <T = Promise<AsyncIterator<PartySubscription>>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  tracks: <T = Promise<AsyncIterator<PartySavedTrackSubscription>>>(args?: {
    where?: PartySavedTrackWhereInput;
    orderBy?: PartySavedTrackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  importable: () => Promise<AsyncIterator<Boolean>>;
}

export interface PlaylistNullablePromise
  extends Promise<Playlist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  uri: () => Promise<String>;
  spotifyExternalUrl: () => Promise<String>;
  user: <T = UserPromise>() => T;
  parties: <T = FragmentableArray<Party>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  imageUrl: () => Promise<String>;
  tracks: <T = FragmentableArray<PartySavedTrack>>(args?: {
    where?: PartySavedTrackWhereInput;
    orderBy?: PartySavedTrackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  importable: () => Promise<Boolean>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AlbumEdge {
  node: Album;
  cursor: String;
}

export interface AlbumEdgePromise extends Promise<AlbumEdge>, Fragmentable {
  node: <T = AlbumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AlbumEdgeSubscription
  extends Promise<AsyncIterator<AlbumEdge>>,
    Fragmentable {
  node: <T = AlbumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlaylist {
  count: Int;
}

export interface AggregatePlaylistPromise
  extends Promise<AggregatePlaylist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaylistSubscription
  extends Promise<AsyncIterator<AggregatePlaylist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Album {
  id: ID_Output;
  spotifyId: ID_Output;
  uri: String;
  name: String;
  releaseDate: String;
  imageUrl: String;
}

export interface AlbumPromise extends Promise<Album>, Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<ID_Output>;
  uri: () => Promise<String>;
  name: () => Promise<String>;
  releaseDate: () => Promise<String>;
  imageUrl: () => Promise<String>;
}

export interface AlbumSubscription
  extends Promise<AsyncIterator<Album>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spotifyId: () => Promise<AsyncIterator<ID_Output>>;
  uri: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  releaseDate: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
}

export interface AlbumNullablePromise
  extends Promise<Album | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<ID_Output>;
  uri: () => Promise<String>;
  name: () => Promise<String>;
  releaseDate: () => Promise<String>;
  imageUrl: () => Promise<String>;
}

export interface PlaylistConnection {
  pageInfo: PageInfo;
  edges: PlaylistEdge[];
}

export interface PlaylistConnectionPromise
  extends Promise<PlaylistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaylistEdge>>() => T;
  aggregate: <T = AggregatePlaylistPromise>() => T;
}

export interface PlaylistConnectionSubscription
  extends Promise<AsyncIterator<PlaylistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaylistEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaylistSubscription>() => T;
}

export interface AlbumSubscriptionPayload {
  mutation: MutationType;
  node: Album;
  updatedFields: String[];
  previousValues: AlbumPreviousValues;
}

export interface AlbumSubscriptionPayloadPromise
  extends Promise<AlbumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AlbumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AlbumPreviousValuesPromise>() => T;
}

export interface AlbumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AlbumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AlbumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AlbumPreviousValuesSubscription>() => T;
}

export interface PartySavedTrackEdge {
  node: PartySavedTrack;
  cursor: String;
}

export interface PartySavedTrackEdgePromise
  extends Promise<PartySavedTrackEdge>,
    Fragmentable {
  node: <T = PartySavedTrackPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PartySavedTrackEdgeSubscription
  extends Promise<AsyncIterator<PartySavedTrackEdge>>,
    Fragmentable {
  node: <T = PartySavedTrackSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AlbumPreviousValues {
  id: ID_Output;
  spotifyId: ID_Output;
  uri: String;
  name: String;
  releaseDate: String;
  imageUrl: String;
}

export interface AlbumPreviousValuesPromise
  extends Promise<AlbumPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<ID_Output>;
  uri: () => Promise<String>;
  name: () => Promise<String>;
  releaseDate: () => Promise<String>;
  imageUrl: () => Promise<String>;
}

export interface AlbumPreviousValuesSubscription
  extends Promise<AsyncIterator<AlbumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spotifyId: () => Promise<AsyncIterator<ID_Output>>;
  uri: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  releaseDate: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePartyInvitation {
  count: Int;
}

export interface AggregatePartyInvitationPromise
  extends Promise<AggregatePartyInvitation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePartyInvitationSubscription
  extends Promise<AsyncIterator<AggregatePartyInvitation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Game {
  id: ID_Output;
  title: String;
  cover?: String;
  type: GameType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GamePromise extends Promise<Game>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  cover: () => Promise<String>;
  type: () => Promise<GameType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GameSubscription
  extends Promise<AsyncIterator<Game>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<GameType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GameNullablePromise
  extends Promise<Game | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  cover: () => Promise<String>;
  type: () => Promise<GameType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PartyInvitationConnection {
  pageInfo: PageInfo;
  edges: PartyInvitationEdge[];
}

export interface PartyInvitationConnectionPromise
  extends Promise<PartyInvitationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PartyInvitationEdge>>() => T;
  aggregate: <T = AggregatePartyInvitationPromise>() => T;
}

export interface PartyInvitationConnectionSubscription
  extends Promise<AsyncIterator<PartyInvitationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PartyInvitationEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePartyInvitationSubscription>() => T;
}

export interface ArtistSubscriptionPayload {
  mutation: MutationType;
  node: Artist;
  updatedFields: String[];
  previousValues: ArtistPreviousValues;
}

export interface ArtistSubscriptionPayloadPromise
  extends Promise<ArtistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArtistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArtistPreviousValuesPromise>() => T;
}

export interface ArtistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArtistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArtistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArtistPreviousValuesSubscription>() => T;
}

export interface PartyCartItemEdge {
  node: PartyCartItem;
  cursor: String;
}

export interface PartyCartItemEdgePromise
  extends Promise<PartyCartItemEdge>,
    Fragmentable {
  node: <T = PartyCartItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PartyCartItemEdgeSubscription
  extends Promise<AsyncIterator<PartyCartItemEdge>>,
    Fragmentable {
  node: <T = PartyCartItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArtistPreviousValues {
  id: ID_Output;
  spotifyId: ID_Output;
  uri: String;
  name: String;
}

export interface ArtistPreviousValuesPromise
  extends Promise<ArtistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<ID_Output>;
  uri: () => Promise<String>;
  name: () => Promise<String>;
}

export interface ArtistPreviousValuesSubscription
  extends Promise<AsyncIterator<ArtistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spotifyId: () => Promise<AsyncIterator<ID_Output>>;
  uri: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePartyCart {
  count: Int;
}

export interface AggregatePartyCartPromise
  extends Promise<AggregatePartyCart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePartyCartSubscription
  extends Promise<AsyncIterator<AggregatePartyCart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAlbum {
  count: Int;
}

export interface AggregateAlbumPromise
  extends Promise<AggregateAlbum>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAlbumSubscription
  extends Promise<AsyncIterator<AggregateAlbum>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PartyCartConnection {
  pageInfo: PageInfo;
  edges: PartyCartEdge[];
}

export interface PartyCartConnectionPromise
  extends Promise<PartyCartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PartyCartEdge>>() => T;
  aggregate: <T = AggregatePartyCartPromise>() => T;
}

export interface PartyCartConnectionSubscription
  extends Promise<AsyncIterator<PartyCartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PartyCartEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePartyCartSubscription>() => T;
}

export interface ChatSubscriptionPayload {
  mutation: MutationType;
  node: Chat;
  updatedFields: String[];
  previousValues: ChatPreviousValues;
}

export interface ChatSubscriptionPayloadPromise
  extends Promise<ChatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChatPreviousValuesPromise>() => T;
}

export interface ChatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChatPreviousValuesSubscription>() => T;
}

export interface PartyEdge {
  node: Party;
  cursor: String;
}

export interface PartyEdgePromise extends Promise<PartyEdge>, Fragmentable {
  node: <T = PartyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PartyEdgeSubscription
  extends Promise<AsyncIterator<PartyEdge>>,
    Fragmentable {
  node: <T = PartySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChatPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ChatPreviousValuesPromise
  extends Promise<ChatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ChatPreviousValuesSubscription
  extends Promise<AsyncIterator<ChatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Location {
  id: ID_Output;
  placeName: String;
  latitude: Float;
  longitude: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  placeName: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  placeName: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  placeName: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface FriendInvitationSubscriptionPayload {
  mutation: MutationType;
  node: FriendInvitation;
  updatedFields: String[];
  previousValues: FriendInvitationPreviousValues;
}

export interface FriendInvitationSubscriptionPayloadPromise
  extends Promise<FriendInvitationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FriendInvitationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FriendInvitationPreviousValuesPromise>() => T;
}

export interface FriendInvitationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FriendInvitationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FriendInvitationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FriendInvitationPreviousValuesSubscription>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FriendInvitationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  invitedUserId: String;
}

export interface FriendInvitationPreviousValuesPromise
  extends Promise<FriendInvitationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  invitedUserId: () => Promise<String>;
}

export interface FriendInvitationPreviousValuesSubscription
  extends Promise<AsyncIterator<FriendInvitationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  invitedUserId: () => Promise<AsyncIterator<String>>;
}

export interface TrackPreviousValues {
  id: ID_Output;
  name: String;
  duration: Int;
  preview_url?: String;
}

export interface TrackPreviousValuesPromise
  extends Promise<TrackPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  duration: () => Promise<Int>;
  preview_url: () => Promise<String>;
}

export interface TrackPreviousValuesSubscription
  extends Promise<AsyncIterator<TrackPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  preview_url: () => Promise<AsyncIterator<String>>;
}

export interface PartyCart {
  id: ID_Output;
}

export interface PartyCartPromise extends Promise<PartyCart>, Fragmentable {
  id: () => Promise<ID_Output>;
  party: <T = PartyPromise>() => T;
  items: <T = FragmentableArray<PartyCartItem>>(args?: {
    where?: PartyCartItemWhereInput;
    orderBy?: PartyCartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PartyCartSubscription
  extends Promise<AsyncIterator<PartyCart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  party: <T = PartySubscription>() => T;
  items: <T = Promise<AsyncIterator<PartyCartItemSubscription>>>(args?: {
    where?: PartyCartItemWhereInput;
    orderBy?: PartyCartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PartyCartNullablePromise
  extends Promise<PartyCart | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  party: <T = PartyPromise>() => T;
  items: <T = FragmentableArray<PartyCartItem>>(args?: {
    where?: PartyCartItemWhereInput;
    orderBy?: PartyCartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ImageEdge {
  node: Image;
  cursor: String;
}

export interface ImageEdgePromise extends Promise<ImageEdge>, Fragmentable {
  node: <T = ImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImageEdgeSubscription
  extends Promise<AsyncIterator<ImageEdge>>,
    Fragmentable {
  node: <T = ImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GameSubscriptionPayload {
  mutation: MutationType;
  node: Game;
  updatedFields: String[];
  previousValues: GamePreviousValues;
}

export interface GameSubscriptionPayloadPromise
  extends Promise<GameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValuesPromise>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface AlbumConnection {
  pageInfo: PageInfo;
  edges: AlbumEdge[];
}

export interface AlbumConnectionPromise
  extends Promise<AlbumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AlbumEdge>>() => T;
  aggregate: <T = AggregateAlbumPromise>() => T;
}

export interface AlbumConnectionSubscription
  extends Promise<AsyncIterator<AlbumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AlbumEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAlbumSubscription>() => T;
}

export interface GamePreviousValues {
  id: ID_Output;
  title: String;
  cover?: String;
  type: GameType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GamePreviousValuesPromise
  extends Promise<GamePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  cover: () => Promise<String>;
  type: () => Promise<GameType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<GameType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateGame {
  count: Int;
}

export interface AggregateGamePromise
  extends Promise<AggregateGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PartyCartItem {
  id: ID_Output;
  name: String;
  description: String;
  price: Float;
  status: PartyCartItemStatus;
  quantity: Int;
}

export interface PartyCartItemPromise
  extends Promise<PartyCartItem>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cart: <T = PartyCartPromise>() => T;
  user: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Float>;
  status: () => Promise<PartyCartItemStatus>;
  quantity: () => Promise<Int>;
}

export interface PartyCartItemSubscription
  extends Promise<AsyncIterator<PartyCartItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cart: <T = PartyCartSubscription>() => T;
  user: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<PartyCartItemStatus>>;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface PartyCartItemNullablePromise
  extends Promise<PartyCartItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cart: <T = PartyCartPromise>() => T;
  user: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Float>;
  status: () => Promise<PartyCartItemStatus>;
  quantity: () => Promise<Int>;
}

export interface GameConnection {
  pageInfo: PageInfo;
  edges: GameEdge[];
}

export interface GameConnectionPromise
  extends Promise<GameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameEdge>>() => T;
  aggregate: <T = AggregateGamePromise>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface ImageSubscriptionPayload {
  mutation: MutationType;
  node: Image;
  updatedFields: String[];
  previousValues: ImagePreviousValues;
}

export interface ImageSubscriptionPayloadPromise
  extends Promise<ImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ImagePreviousValuesPromise>() => T;
}

export interface ImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ImagePreviousValuesSubscription>() => T;
}

export interface FriendInvitationEdge {
  node: FriendInvitation;
  cursor: String;
}

export interface FriendInvitationEdgePromise
  extends Promise<FriendInvitationEdge>,
    Fragmentable {
  node: <T = FriendInvitationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FriendInvitationEdgeSubscription
  extends Promise<AsyncIterator<FriendInvitationEdge>>,
    Fragmentable {
  node: <T = FriendInvitationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ImagePreviousValues {
  id: ID_Output;
  height: Int;
  width: Int;
  url: String;
}

export interface ImagePreviousValuesPromise
  extends Promise<ImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  height: () => Promise<Int>;
  width: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface ImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  height: () => Promise<AsyncIterator<Int>>;
  width: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChat {
  count: Int;
}

export interface AggregateChatPromise
  extends Promise<AggregateChat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChatSubscription
  extends Promise<AsyncIterator<AggregateChat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Artist {
  id: ID_Output;
  spotifyId: ID_Output;
  uri: String;
  name: String;
}

export interface ArtistPromise extends Promise<Artist>, Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<ID_Output>;
  uri: () => Promise<String>;
  name: () => Promise<String>;
}

export interface ArtistSubscription
  extends Promise<AsyncIterator<Artist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spotifyId: () => Promise<AsyncIterator<ID_Output>>;
  uri: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ArtistNullablePromise
  extends Promise<Artist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<ID_Output>;
  uri: () => Promise<String>;
  name: () => Promise<String>;
}

export interface ChatConnection {
  pageInfo: PageInfo;
  edges: ChatEdge[];
}

export interface ChatConnectionPromise
  extends Promise<ChatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChatEdge>>() => T;
  aggregate: <T = AggregateChatPromise>() => T;
}

export interface ChatConnectionSubscription
  extends Promise<AsyncIterator<ChatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChatSubscription>() => T;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface AggregateTrack {
  count: Int;
}

export interface AggregateTrackPromise
  extends Promise<AggregateTrack>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTrackSubscription
  extends Promise<AsyncIterator<AggregateTrack>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LocationPreviousValues {
  id: ID_Output;
  placeName: String;
  latitude: Float;
  longitude: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  placeName: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  placeName: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Track {
  id: ID_Output;
  name: String;
  duration: Int;
  preview_url?: String;
}

export interface TrackPromise extends Promise<Track>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  album: <T = AlbumPromise>() => T;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  duration: () => Promise<Int>;
  preview_url: () => Promise<String>;
}

export interface TrackSubscription
  extends Promise<AsyncIterator<Track>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  album: <T = AlbumSubscription>() => T;
  artists: <T = Promise<AsyncIterator<ArtistSubscription>>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  duration: () => Promise<AsyncIterator<Int>>;
  preview_url: () => Promise<AsyncIterator<String>>;
}

export interface TrackNullablePromise
  extends Promise<Track | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  album: <T = AlbumPromise>() => T;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  duration: () => Promise<Int>;
  preview_url: () => Promise<String>;
}

export interface PartyInvitation {
  id: ID_Output;
  invitedUserId: String;
  partyId: String;
  createdAt: DateTimeOutput;
}

export interface PartyInvitationPromise
  extends Promise<PartyInvitation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  invitedBy: <T = UserPromise>() => T;
  user: <T = UserPromise>() => T;
  party: <T = PartyPromise>() => T;
  invitedUserId: () => Promise<String>;
  partyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PartyInvitationSubscription
  extends Promise<AsyncIterator<PartyInvitation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  invitedBy: <T = UserSubscription>() => T;
  user: <T = UserSubscription>() => T;
  party: <T = PartySubscription>() => T;
  invitedUserId: () => Promise<AsyncIterator<String>>;
  partyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PartyInvitationNullablePromise
  extends Promise<PartyInvitation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  invitedBy: <T = UserPromise>() => T;
  user: <T = UserPromise>() => T;
  party: <T = PartyPromise>() => T;
  invitedUserId: () => Promise<String>;
  partyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AggregatePartySavedTrack {
  count: Int;
}

export interface AggregatePartySavedTrackPromise
  extends Promise<AggregatePartySavedTrack>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePartySavedTrackSubscription
  extends Promise<AsyncIterator<AggregatePartySavedTrack>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface PartyInvitationEdge {
  node: PartyInvitation;
  cursor: String;
}

export interface PartyInvitationEdgePromise
  extends Promise<PartyInvitationEdge>,
    Fragmentable {
  node: <T = PartyInvitationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PartyInvitationEdgeSubscription
  extends Promise<AsyncIterator<PartyInvitationEdge>>,
    Fragmentable {
  node: <T = PartyInvitationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MessagePreviousValues {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PartyCartItemConnection {
  pageInfo: PageInfo;
  edges: PartyCartItemEdge[];
}

export interface PartyCartItemConnectionPromise
  extends Promise<PartyCartItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PartyCartItemEdge>>() => T;
  aggregate: <T = AggregatePartyCartItemPromise>() => T;
}

export interface PartyCartItemConnectionSubscription
  extends Promise<AsyncIterator<PartyCartItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PartyCartItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePartyCartItemSubscription>() => T;
}

export interface FriendInvitation {
  id: ID_Output;
  createdAt: DateTimeOutput;
  invitedUserId: String;
}

export interface FriendInvitationPromise
  extends Promise<FriendInvitation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  invitedBy: <T = UserPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  invitedUserId: () => Promise<String>;
}

export interface FriendInvitationSubscription
  extends Promise<AsyncIterator<FriendInvitation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  invitedBy: <T = UserSubscription>() => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  invitedUserId: () => Promise<AsyncIterator<String>>;
}

export interface FriendInvitationNullablePromise
  extends Promise<FriendInvitation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  invitedBy: <T = UserPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  invitedUserId: () => Promise<String>;
}

export interface AggregateParty {
  count: Int;
}

export interface AggregatePartyPromise
  extends Promise<AggregateParty>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePartySubscription
  extends Promise<AsyncIterator<AggregateParty>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PartySubscriptionPayload {
  mutation: MutationType;
  node: Party;
  updatedFields: String[];
  previousValues: PartyPreviousValues;
}

export interface PartySubscriptionPayloadPromise
  extends Promise<PartySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PartyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PartyPreviousValuesPromise>() => T;
}

export interface PartySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PartySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PartySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PartyPreviousValuesSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PartyPreviousValues {
  id: ID_Output;
  title: String;
  normalizedTitle: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  colorTint: String;
  isPublic?: Boolean;
  start: DateTimeOutput;
  end: DateTimeOutput;
  inviteSecret: String;
}

export interface PartyPreviousValuesPromise
  extends Promise<PartyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  normalizedTitle: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  colorTint: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  inviteSecret: () => Promise<String>;
}

export interface PartyPreviousValuesSubscription
  extends Promise<AsyncIterator<PartyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  normalizedTitle: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  colorTint: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  inviteSecret: () => Promise<AsyncIterator<String>>;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface ArtistConnection {
  pageInfo: PageInfo;
  edges: ArtistEdge[];
}

export interface ArtistConnectionPromise
  extends Promise<ArtistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArtistEdge>>() => T;
  aggregate: <T = AggregateArtistPromise>() => T;
}

export interface ArtistConnectionSubscription
  extends Promise<AsyncIterator<ArtistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArtistEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArtistSubscription>() => T;
}

export interface ImageConnection {
  pageInfo: PageInfo;
  edges: ImageEdge[];
}

export interface ImageConnectionPromise
  extends Promise<ImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImageEdge>>() => T;
  aggregate: <T = AggregateImagePromise>() => T;
}

export interface ImageConnectionSubscription
  extends Promise<AsyncIterator<ImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImageSubscription>() => T;
}

export interface PartyCartSubscriptionPayload {
  mutation: MutationType;
  node: PartyCart;
  updatedFields: String[];
  previousValues: PartyCartPreviousValues;
}

export interface PartyCartSubscriptionPayloadPromise
  extends Promise<PartyCartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PartyCartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PartyCartPreviousValuesPromise>() => T;
}

export interface PartyCartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PartyCartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PartyCartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PartyCartPreviousValuesSubscription>() => T;
}

export interface GameEdge {
  node: Game;
  cursor: String;
}

export interface GameEdgePromise extends Promise<GameEdge>, Fragmentable {
  node: <T = GamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdge>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PartyCartPreviousValues {
  id: ID_Output;
}

export interface PartyCartPreviousValuesPromise
  extends Promise<PartyCartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface PartyCartPreviousValuesSubscription
  extends Promise<AsyncIterator<PartyCartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface FriendInvitationConnection {
  pageInfo: PageInfo;
  edges: FriendInvitationEdge[];
}

export interface FriendInvitationConnectionPromise
  extends Promise<FriendInvitationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FriendInvitationEdge>>() => T;
  aggregate: <T = AggregateFriendInvitationPromise>() => T;
}

export interface FriendInvitationConnectionSubscription
  extends Promise<AsyncIterator<FriendInvitationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FriendInvitationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFriendInvitationSubscription>() => T;
}

export interface ArtistEdge {
  node: Artist;
  cursor: String;
}

export interface ArtistEdgePromise extends Promise<ArtistEdge>, Fragmentable {
  node: <T = ArtistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArtistEdgeSubscription
  extends Promise<AsyncIterator<ArtistEdge>>,
    Fragmentable {
  node: <T = ArtistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PartyCartItemSubscriptionPayload {
  mutation: MutationType;
  node: PartyCartItem;
  updatedFields: String[];
  previousValues: PartyCartItemPreviousValues;
}

export interface PartyCartItemSubscriptionPayloadPromise
  extends Promise<PartyCartItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PartyCartItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PartyCartItemPreviousValuesPromise>() => T;
}

export interface PartyCartItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PartyCartItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PartyCartItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PartyCartItemPreviousValuesSubscription>() => T;
}

export interface PlaylistEdge {
  node: Playlist;
  cursor: String;
}

export interface PlaylistEdgePromise
  extends Promise<PlaylistEdge>,
    Fragmentable {
  node: <T = PlaylistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaylistEdgeSubscription
  extends Promise<AsyncIterator<PlaylistEdge>>,
    Fragmentable {
  node: <T = PlaylistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PartyCartItemPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  price: Float;
  status: PartyCartItemStatus;
  quantity: Int;
}

export interface PartyCartItemPreviousValuesPromise
  extends Promise<PartyCartItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Float>;
  status: () => Promise<PartyCartItemStatus>;
  quantity: () => Promise<Int>;
}

export interface PartyCartItemPreviousValuesSubscription
  extends Promise<AsyncIterator<PartyCartItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<PartyCartItemStatus>>;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface AggregatePartyCartItem {
  count: Int;
}

export interface AggregatePartyCartItemPromise
  extends Promise<AggregatePartyCartItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePartyCartItemSubscription
  extends Promise<AsyncIterator<AggregatePartyCartItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateArtist {
  count: Int;
}

export interface AggregateArtistPromise
  extends Promise<AggregateArtist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArtistSubscription
  extends Promise<AsyncIterator<AggregateArtist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PartyConnection {
  pageInfo: PageInfo;
  edges: PartyEdge[];
}

export interface PartyConnectionPromise
  extends Promise<PartyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PartyEdge>>() => T;
  aggregate: <T = AggregatePartyPromise>() => T;
}

export interface PartyConnectionSubscription
  extends Promise<AsyncIterator<PartyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PartyEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePartySubscription>() => T;
}

export interface PartyInvitationSubscriptionPayload {
  mutation: MutationType;
  node: PartyInvitation;
  updatedFields: String[];
  previousValues: PartyInvitationPreviousValues;
}

export interface PartyInvitationSubscriptionPayloadPromise
  extends Promise<PartyInvitationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PartyInvitationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PartyInvitationPreviousValuesPromise>() => T;
}

export interface PartyInvitationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PartyInvitationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PartyInvitationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PartyInvitationPreviousValuesSubscription>() => T;
}

export interface AggregateImage {
  count: Int;
}

export interface AggregateImagePromise
  extends Promise<AggregateImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImageSubscription
  extends Promise<AsyncIterator<AggregateImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PartyInvitationPreviousValues {
  id: ID_Output;
  invitedUserId: String;
  partyId: String;
  createdAt: DateTimeOutput;
}

export interface PartyInvitationPreviousValuesPromise
  extends Promise<PartyInvitationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  invitedUserId: () => Promise<String>;
  partyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PartyInvitationPreviousValuesSubscription
  extends Promise<AsyncIterator<PartyInvitationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  invitedUserId: () => Promise<AsyncIterator<String>>;
  partyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateFriendInvitation {
  count: Int;
}

export interface AggregateFriendInvitationPromise
  extends Promise<AggregateFriendInvitation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFriendInvitationSubscription
  extends Promise<AsyncIterator<AggregateFriendInvitation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chat {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ChatPromise extends Promise<Chat>, Fragmentable {
  id: () => Promise<ID_Output>;
  party: <T = PartyPromise>() => T;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ChatSubscription
  extends Promise<AsyncIterator<Chat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  party: <T = PartySubscription>() => T;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ChatNullablePromise
  extends Promise<Chat | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  party: <T = PartyPromise>() => T;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TrackConnection {
  pageInfo: PageInfo;
  edges: TrackEdge[];
}

export interface TrackConnectionPromise
  extends Promise<TrackConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TrackEdge>>() => T;
  aggregate: <T = AggregateTrackPromise>() => T;
}

export interface TrackConnectionSubscription
  extends Promise<AsyncIterator<TrackConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TrackEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTrackSubscription>() => T;
}

export interface PartyCartEdge {
  node: PartyCart;
  cursor: String;
}

export interface PartyCartEdgePromise
  extends Promise<PartyCartEdge>,
    Fragmentable {
  node: <T = PartyCartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PartyCartEdgeSubscription
  extends Promise<AsyncIterator<PartyCartEdge>>,
    Fragmentable {
  node: <T = PartyCartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PlaylistSubscriptionPayload {
  mutation: MutationType;
  node: Playlist;
  updatedFields: String[];
  previousValues: PlaylistPreviousValues;
}

export interface PlaylistSubscriptionPayloadPromise
  extends Promise<PlaylistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlaylistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlaylistPreviousValuesPromise>() => T;
}

export interface PlaylistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaylistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaylistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlaylistPreviousValuesSubscription>() => T;
}

export interface Party {
  id: ID_Output;
  title: String;
  normalizedTitle: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  colorTint: String;
  isPublic?: Boolean;
  start: DateTimeOutput;
  end: DateTimeOutput;
  inviteSecret: String;
}

export interface PartyPromise extends Promise<Party>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  normalizedTitle: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  location: <T = LocationPromise>() => T;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  colorTint: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  inviteSecret: () => Promise<String>;
  playlist: <T = FragmentableArray<Playlist>>(args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  savedTracks: <T = FragmentableArray<PartySavedTrack>>(args?: {
    where?: PartySavedTrackWhereInput;
    orderBy?: PartySavedTrackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cart: <T = PartyCartPromise>() => T;
}

export interface PartySubscription
  extends Promise<AsyncIterator<Party>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  normalizedTitle: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  location: <T = LocationSubscription>() => T;
  games: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  colorTint: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  inviteSecret: () => Promise<AsyncIterator<String>>;
  playlist: <T = Promise<AsyncIterator<PlaylistSubscription>>>(args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  savedTracks: <
    T = Promise<AsyncIterator<PartySavedTrackSubscription>>
  >(args?: {
    where?: PartySavedTrackWhereInput;
    orderBy?: PartySavedTrackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cart: <T = PartyCartSubscription>() => T;
}

export interface PartyNullablePromise
  extends Promise<Party | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  normalizedTitle: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  location: <T = LocationPromise>() => T;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  colorTint: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  inviteSecret: () => Promise<String>;
  playlist: <T = FragmentableArray<Playlist>>(args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  savedTracks: <T = FragmentableArray<PartySavedTrack>>(args?: {
    where?: PartySavedTrackWhereInput;
    orderBy?: PartySavedTrackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cart: <T = PartyCartPromise>() => T;
}

export interface PartySavedTrackPreviousValues {
  id: ID_Output;
  spotifyId: String;
  durationMs: Int;
  explicit: Boolean;
  name: String;
  previewUrl?: String;
  uri: String;
  stringArtists: String;
  length: String;
  popularity: Int;
}

export interface PartySavedTrackPreviousValuesPromise
  extends Promise<PartySavedTrackPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spotifyId: () => Promise<String>;
  durationMs: () => Promise<Int>;
  explicit: () => Promise<Boolean>;
  name: () => Promise<String>;
  previewUrl: () => Promise<String>;
  uri: () => Promise<String>;
  stringArtists: () => Promise<String>;
  length: () => Promise<String>;
  popularity: () => Promise<Int>;
}

export interface PartySavedTrackPreviousValuesSubscription
  extends Promise<AsyncIterator<PartySavedTrackPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spotifyId: () => Promise<AsyncIterator<String>>;
  durationMs: () => Promise<AsyncIterator<Int>>;
  explicit: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  previewUrl: () => Promise<AsyncIterator<String>>;
  uri: () => Promise<AsyncIterator<String>>;
  stringArtists: () => Promise<AsyncIterator<String>>;
  length: () => Promise<AsyncIterator<String>>;
  popularity: () => Promise<AsyncIterator<Int>>;
}

export interface PartySavedTrackSubscriptionPayload {
  mutation: MutationType;
  node: PartySavedTrack;
  updatedFields: String[];
  previousValues: PartySavedTrackPreviousValues;
}

export interface PartySavedTrackSubscriptionPayloadPromise
  extends Promise<PartySavedTrackSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PartySavedTrackPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PartySavedTrackPreviousValuesPromise>() => T;
}

export interface PartySavedTrackSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PartySavedTrackSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PartySavedTrackSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PartySavedTrackPreviousValuesSubscription>() => T;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PartySavedTrackConnection {
  pageInfo: PageInfo;
  edges: PartySavedTrackEdge[];
}

export interface PartySavedTrackConnectionPromise
  extends Promise<PartySavedTrackConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PartySavedTrackEdge>>() => T;
  aggregate: <T = AggregatePartySavedTrackPromise>() => T;
}

export interface PartySavedTrackConnectionSubscription
  extends Promise<AsyncIterator<PartySavedTrackConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PartySavedTrackEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePartySavedTrackSubscription>() => T;
}

export interface ChatEdge {
  node: Chat;
  cursor: String;
}

export interface ChatEdgePromise extends Promise<ChatEdge>, Fragmentable {
  node: <T = ChatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChatEdgeSubscription
  extends Promise<AsyncIterator<ChatEdge>>,
    Fragmentable {
  node: <T = ChatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Image {
  id: ID_Output;
  height: Int;
  width: Int;
  url: String;
}

export interface ImagePromise extends Promise<Image>, Fragmentable {
  id: () => Promise<ID_Output>;
  height: () => Promise<Int>;
  width: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface ImageSubscription
  extends Promise<AsyncIterator<Image>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  height: () => Promise<AsyncIterator<Int>>;
  width: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ImageNullablePromise
  extends Promise<Image | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  height: () => Promise<Int>;
  width: () => Promise<Int>;
  url: () => Promise<String>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "PartyInvitation",
    embedded: false
  },
  {
    name: "FriendInvitation",
    embedded: false
  },
  {
    name: "Party",
    embedded: false
  },
  {
    name: "Chat",
    embedded: false
  },
  {
    name: "Game",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Playlist",
    embedded: false
  },
  {
    name: "PartyCart",
    embedded: false
  },
  {
    name: "PartyCartItem",
    embedded: false
  },
  {
    name: "Track",
    embedded: false
  },
  {
    name: "PartySavedTrack",
    embedded: false
  },
  {
    name: "Album",
    embedded: false
  },
  {
    name: "Artist",
    embedded: false
  },
  {
    name: "Image",
    embedded: false
  },
  {
    name: "GameType",
    embedded: false
  },
  {
    name: "SocialMediaType",
    embedded: false
  },
  {
    name: "PartyCartItemStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
